"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[953755],{15680:(e,t,a)=>{a.d(t,{xA:()=>s,yg:()=>c});var n=a(296540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},y="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),y=m(a),d=r,c=y["".concat(p,".").concat(d)]||y[d]||g[d]||l;return a?n.createElement(c,o(o({ref:t},s),{},{components:a})):n.createElement(c,o({ref:t},s))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[y]="string"==typeof e?e:r,o[1]=i;for(var m=2;m<l;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},377109:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var n=a(58168),r=(a(296540),a(15680));const l={title:"import strict mode",language:"en"},o=void 0,i={unversionedId:"data-operate/import/import-scenes/load-strict-mode",id:"version-1.2/data-operate/import/import-scenes/load-strict-mode",title:"import strict mode",description:"\x3c!--",source:"@site/versioned_docs/version-1.2/data-operate/import/import-scenes/load-strict-mode.md",sourceDirName:"data-operate/import/import-scenes",slug:"/data-operate/import/import-scenes/load-strict-mode",permalink:"/docs/1.2/data-operate/import/import-scenes/load-strict-mode",draft:!1,tags:[],version:"1.2",frontMatter:{title:"import strict mode",language:"en"},sidebar:"docs",previous:{title:"Data transformation, column mapping and filtering",permalink:"/docs/1.2/data-operate/import/import-scenes/load-data-convert"},next:{title:"Binlog Load",permalink:"/docs/1.2/data-operate/import/import-way/binlog-load-manual"}},p={},m=[{value:"How to set",id:"how-to-set",level:2},{value:"The role of strict mode",id:"the-role-of-strict-mode",level:2}],s={toc:m},y="wrapper";function g(e){let{components:t,...a}=e;return(0,r.yg)(y,(0,n.A)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"import-strict-mode"},"import strict mode"),(0,r.yg)("p",null,"Strict mode (strict_mode) is configured as a parameter in the import operation. This parameter affects the import behavior of certain values and the final imported data."),(0,r.yg)("p",null,"This document mainly explains how to set strict mode, and the impact of strict mode."),(0,r.yg)("h2",{id:"how-to-set"},"How to set"),(0,r.yg)("p",null,"Strict mode is all False by default, i.e. off."),(0,r.yg)("p",null,"Different import methods set strict mode in different ways."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"/docs/1.2/sql-manual/sql-reference/Data-Manipulation-Statements/Load/BROKER-LOAD"},"BROKER LOAD")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-sql"},'LOAD LABEL example_db.label1\n(\n    DATA INFILE("bos://my_bucket/input/file.txt")\n    INTO TABLE `my_table`\n    COLUMNS TERMINATED BY ","\n)\nWITH BROKER bos\n(\n    "bos_endpoint" = "http://bj.bcebos.com",\n    "bos_accesskey" = "xxxxxxxxxxxxxxxxxxxxxxxxxxx",\n    "bos_secret_accesskey"="yyyyyyyyyyyyyyyyyyyyyyyy"\n)\nPROPERTIES\n(\n    "strict_mode" = "true"\n)\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"/docs/1.2/sql-manual/sql-reference/Data-Manipulation-Statements/Load/STREAM-LOAD"},"STREAM LOAD")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'curl --location-trusted -u user:passwd \\\n-H "strict_mode: true" \\\n-T 1.txt \\\nhttp://host:port/api/example_db/my_table/_stream_load\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"/docs/1.2/sql-manual/sql-reference/Data-Manipulation-Statements/Load/CREATE-ROUTINE-LOAD"},"ROUTINE LOAD")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-sql"},'CREATE ROUTINE LOAD example_db.test_job ON my_table\nPROPERTIES\n(\n    "strict_mode" = "true"\n)\nFROM KAFKA\n(\n    "kafka_broker_list" = "broker1:9092,broker2:9092,broker3:9092",\n    "kafka_topic" = "my_topic"\n);\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"/docs/1.2/sql-manual/sql-reference/Data-Manipulation-Statements/Manipulation/INSERT"},"INSERT")),(0,r.yg)("p",{parentName:"li"},"Set via ",(0,r.yg)("a",{parentName:"p",href:"/docs/1.2/advanced/variables"},"session variables"),":"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SET enable_insert_strict = true;\nINSERT INTO my_table ...;\n")))),(0,r.yg)("h2",{id:"the-role-of-strict-mode"},"The role of strict mode"),(0,r.yg)("p",null,"Strict mode means strict filtering of column type conversions during import."),(0,r.yg)("p",null,"The strict filtering strategy is as follows:"),(0,r.yg)("p",null,"For column type conversion, if strict mode is turned on, the wrong data will be filtered. The wrong data here refers to: the original data is not ",(0,r.yg)("inlineCode",{parentName:"p"},"null"),", but the result is ",(0,r.yg)("inlineCode",{parentName:"p"},"null")," after column type conversion."),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"column type conversion")," mentioned here does not include the ",(0,r.yg)("inlineCode",{parentName:"p"},"null")," value calculated by the function."),(0,r.yg)("p",null,"For an imported column type that contains range restrictions, if the original data can pass the type conversion normally, but cannot pass the range restrictions, strict mode will not affect it. For example: if the type is ",(0,r.yg)("inlineCode",{parentName:"p"},"decimal(1,0)")," and the original data is 10, it belongs to the range that can be converted by type but is not within the scope of the column declaration. This kind of data strict has no effect on it."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Take the column type as TinyInt as an example:"),(0,r.yg)("table",{parentName:"li"},(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Primitive data type"),(0,r.yg)("th",{parentName:"tr",align:null},"Primitive data example"),(0,r.yg)("th",{parentName:"tr",align:null},"Converted value to TinyInt"),(0,r.yg)("th",{parentName:"tr",align:null},"Strict mode"),(0,r.yg)("th",{parentName:"tr",align:null},"Result"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"NULL"),(0,r.yg)("td",{parentName:"tr",align:null},"\\N"),(0,r.yg)("td",{parentName:"tr",align:null},"NULL"),(0,r.yg)("td",{parentName:"tr",align:null},"ON or OFF"),(0,r.yg)("td",{parentName:"tr",align:null},"NULL")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Non-null value"),(0,r.yg)("td",{parentName:"tr",align:null},'"abc" or 2000'),(0,r.yg)("td",{parentName:"tr",align:null},"NULL"),(0,r.yg)("td",{parentName:"tr",align:null},"On"),(0,r.yg)("td",{parentName:"tr",align:null},"Illegal value (filtered)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"non-null value"),(0,r.yg)("td",{parentName:"tr",align:null},'"abc"'),(0,r.yg)("td",{parentName:"tr",align:null},"NULL"),(0,r.yg)("td",{parentName:"tr",align:null},"off"),(0,r.yg)("td",{parentName:"tr",align:null},"NULL")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"non-null value"),(0,r.yg)("td",{parentName:"tr",align:null},"1"),(0,r.yg)("td",{parentName:"tr",align:null},"1"),(0,r.yg)("td",{parentName:"tr",align:null},"on or off"),(0,r.yg)("td",{parentName:"tr",align:null},"import correctly")))),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},"Description:"),(0,r.yg)("ol",{parentName:"blockquote"},(0,r.yg)("li",{parentName:"ol"},"Columns in the table allow to import null values"),(0,r.yg)("li",{parentName:"ol"},"After ",(0,r.yg)("inlineCode",{parentName:"li"},"abc")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"2000")," are converted to TinyInt, they will become NULL due to type or precision issues. When strict mode is on, this data will be filtered. And if it is closed, ",(0,r.yg)("inlineCode",{parentName:"li"},"null")," will be imported.")))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Take the column type as Decimal(1,0) as an example"),(0,r.yg)("table",{parentName:"li"},(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Primitive Data Types"),(0,r.yg)("th",{parentName:"tr",align:null},"Examples of Primitive Data"),(0,r.yg)("th",{parentName:"tr",align:null},"Converted to Decimal"),(0,r.yg)("th",{parentName:"tr",align:null},"Strict Mode"),(0,r.yg)("th",{parentName:"tr",align:null},"Result"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Null"),(0,r.yg)("td",{parentName:"tr",align:null},"\\N"),(0,r.yg)("td",{parentName:"tr",align:null},"null"),(0,r.yg)("td",{parentName:"tr",align:null},"On or Off"),(0,r.yg)("td",{parentName:"tr",align:null},"NULL")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"non-null value"),(0,r.yg)("td",{parentName:"tr",align:null},"aaa"),(0,r.yg)("td",{parentName:"tr",align:null},"NULL"),(0,r.yg)("td",{parentName:"tr",align:null},"on"),(0,r.yg)("td",{parentName:"tr",align:null},"illegal value (filtered)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"non-null value"),(0,r.yg)("td",{parentName:"tr",align:null},"aaa"),(0,r.yg)("td",{parentName:"tr",align:null},"NULL"),(0,r.yg)("td",{parentName:"tr",align:null},"off"),(0,r.yg)("td",{parentName:"tr",align:null},"NULL")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"non-null value"),(0,r.yg)("td",{parentName:"tr",align:null},"1 or 10"),(0,r.yg)("td",{parentName:"tr",align:null},"1 or 10"),(0,r.yg)("td",{parentName:"tr",align:null},"on or off"),(0,r.yg)("td",{parentName:"tr",align:null},"import correctly")))),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},"Description:"),(0,r.yg)("ol",{parentName:"blockquote"},(0,r.yg)("li",{parentName:"ol"},"Columns in the table allow to import null values"),(0,r.yg)("li",{parentName:"ol"},"After ",(0,r.yg)("inlineCode",{parentName:"li"},"abc")," is converted to Decimal, it will become NULL due to type problem. When strict mode is on, this data will be filtered. And if it is closed, ",(0,r.yg)("inlineCode",{parentName:"li"},"null")," will be imported."),(0,r.yg)("li",{parentName:"ol"},"Although ",(0,r.yg)("inlineCode",{parentName:"li"},"10")," is an out-of-range value, because its type conforms to the requirements of decimal, strict mode does not affect it. ",(0,r.yg)("inlineCode",{parentName:"li"},"10")," will eventually be filtered in other import processing flows. But not filtered by strict mode."))))))}g.isMDXComponent=!0}}]);