"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[871487],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>y});var a=n(296540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),g=i,y=u["".concat(s,".").concat(g)]||u[g]||m[g]||r;return n?a.createElement(y,l(l({ref:t},d),{},{components:n})):a.createElement(y,l({ref:t},d))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1216:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(58168),i=(n(296540),n(15680));const r={title:"Functions and Demands",language:"en"},l=void 0,o={unversionedId:"query-acceleration/materialized-view/async-materialized-view/functions-and-demands",id:"version-3.0/query-acceleration/materialized-view/async-materialized-view/functions-and-demands",title:"Functions and Demands",description:"\x3c!--",source:"@site/versioned_docs/version-3.0/query-acceleration/materialized-view/async-materialized-view/functions-and-demands.md",sourceDirName:"query-acceleration/materialized-view/async-materialized-view",slug:"/query-acceleration/materialized-view/async-materialized-view/functions-and-demands",permalink:"/docs/3.0/query-acceleration/materialized-view/async-materialized-view/functions-and-demands",draft:!1,tags:[],version:"3.0",frontMatter:{title:"Functions and Demands",language:"en"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/3.0/query-acceleration/materialized-view/async-materialized-view/overview"},next:{title:"Use Guide",permalink:"/docs/3.0/query-acceleration/materialized-view/async-materialized-view/use-guide"}},s={},p=[{value:"DDL and Basic Operations",id:"ddl-and-basic-operations",level:2},{value:"Create Materialized View:",id:"create-materialized-view",level:3},{value:"2 Alter Materialized View",id:"2-alter-materialized-view",level:3},{value:"3 Drop Materialized View",id:"3-drop-materialized-view",level:3},{value:"4 Refresh Materialized View",id:"4-refresh-materialized-view",level:3},{value:"5 Pause Materialized View",id:"5-pause-materialized-view",level:3},{value:"6 Resume Materialized View",id:"6-resume-materialized-view",level:3},{value:"7 Cancel Refresh Task",id:"7-cancel-refresh-task",level:3},{value:"Metadata Querying",id:"metadata-querying",level:2},{value:"Permission",id:"permission",level:2},{value:"Materialized Refresh Support in Data Lakes",id:"materialized-refresh-support-in-data-lakes",level:2},{value:"Materialized Views and OLAP Internal Tables",id:"materialized-views-and-olap-internal-tables",level:2},{value:"Direct Querying",id:"direct-querying",level:2},{value:"Rewriting Query",id:"rewriting-query",level:2},{value:"Condition Compensation",id:"condition-compensation",level:3},{value:"JOIN Rewriting",id:"join-rewriting",level:3},{value:"JOIN Derivation",id:"join-derivation",level:3},{value:"Aggregation Rewriting",id:"aggregation-rewriting",level:3},{value:"Roll-Up Aggregation Rewriting",id:"roll-up-aggregation-rewriting",level:3},{value:"Multi-Dimensional Aggregation Rewriting",id:"multi-dimensional-aggregation-rewriting",level:3},{value:"Partition Compensation Rewriting",id:"partition-compensation-rewriting",level:3},{value:"Nested Materialized View Rewriting",id:"nested-materialized-view-rewriting",level:3},{value:"Explain Query Rewriting",id:"explain-query-rewriting",level:2},{value:"Reference",id:"reference",level:2},{value:"Materialized View Related Configuration",id:"materialized-view-related-configuration",level:3}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.yg)(u,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This document provides a comprehensive overview of Materialized View DDL (Data Definition Language) operations, metadata querying, permission requirements, data lake refresh support, relationships with OLAP internal tables, direct querying, query rewriting capabilities, and basic commands."),(0,i.yg)("h2",{id:"ddl-and-basic-operations"},"DDL and Basic Operations"),(0,i.yg)("h3",{id:"create-materialized-view"},"Create Materialized View:"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"1. Refer to ",(0,i.yg)("a",{parentName:"strong",href:"../../../sql-manual/sql-statements/Data-Definition-Statements/Create/CREATE-ASYNC-MATERIALIZED-VIEW"},"CREATE ASYNC MATERIALIZED VIEW"))),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"2. New Attribute")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"use_for_rewrite:: Indicates whether this materialized view participates in transparent rewriting. If set to false, it does not participate in transparent rewriting; the default is true. In data modeling scenarios, if the materialized view is only used for direct queries, this attribute can be set for the materialized view to prevent it from participating in transparent rewriting, thereby improving query response speed.")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"3. Partitioned Materialized Views")),(0,i.yg)("p",null,"When creating a partitioned materialized view, only the ",(0,i.yg)("inlineCode",{parentName:"p"},"date_trunc")," function and constants are allowed for expressions referencing the partition field. The following statement meets the requirements:"),(0,i.yg)("p",null,"The column referenced by the partition field only uses the ",(0,i.yg)("inlineCode",{parentName:"p"},"date_trunc")," function."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv_1 BUILD IMMEDIATE REFRESH AUTO ON MANUAL     \nPARTITION BY (date_alias)     \nDISTRIBUTED BY RANDOM BUCKETS 2     \nPROPERTIES ('replication_num' = '1')     \nAS     \nSELECT     \n  l_linestatus,     \n  date_trunc(o_orderdate) AS date_alias,     \n  o_shippriority     \nFROM     \n  orders     \n  LEFT JOIN lineitem ON l_orderkey = o_orderkey;\n")),(0,i.yg)("p",null,"The following example cannot create a partitioned materialized view because the expression referencing the partition field uses the ",(0,i.yg)("inlineCode",{parentName:"p"},"to_date")," function:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv_1 BUILD IMMEDIATE REFRESH AUTO ON MANUAL     \nPARTITION BY (date_alias)     \nDISTRIBUTED BY RANDOM BUCKETS 2     \nPROPERTIES ('replication_num' = '1')     \nAS     \nSELECT     \n  l_linestatus,     \n  to_date(o_orderdate) AS date_alias,     \n  o_shippriority     \nFROM     \n  orders     \n  LEFT JOIN lineitem ON l_orderkey = o_orderkey;\n")),(0,i.yg)("h3",{id:"2-alter-materialized-view"},"2 Alter Materialized View"),(0,i.yg)("p",null,"Refer to ",(0,i.yg)("a",{parentName:"p",href:"https://doris.apache.org/docs/sql-manual/sql-statements/Data-Definition-Statements/Alter/ALTER-ASYNC-MATERIALIZED-VIEW"},"ALTER ASYNC MATERIALIZED VIEW")),(0,i.yg)("h3",{id:"3-drop-materialized-view"},"3 Drop Materialized View"),(0,i.yg)("p",null,"Refer to ",(0,i.yg)("a",{parentName:"p",href:"https://doris.apache.org/docs/sql-manual/sql-statements/Data-Definition-Statements/Drop/DROP-ASYNC-MATERIALIZED-VIEW"},"DROP ASYNC MATERIALIZED VIEW")),(0,i.yg)("h3",{id:"4-refresh-materialized-view"},"4 Refresh Materialized View"),(0,i.yg)("p",null,"Refer to ",(0,i.yg)("a",{parentName:"p",href:"https://doris.apache.org/docs/sql-manual/sql-statements/Utility-Statements/REFRESH-MATERIALIZED-VIEW/"},"REFRESH MATERIALIZED VIEW")),(0,i.yg)("h3",{id:"5-pause-materialized-view"},"5 Pause Materialized View"),(0,i.yg)("p",null,"Refer to ",(0,i.yg)("a",{parentName:"p",href:"https://doris.apache.org/docs/sql-manual/sql-statements/Utility-Statements/PAUSE-MATERIALIZED-VIEW"},"PAUSE MATERIALIZED VIEW")),(0,i.yg)("h3",{id:"6-resume-materialized-view"},"6 Resume Materialized View"),(0,i.yg)("p",null,"Refer to ",(0,i.yg)("a",{parentName:"p",href:"https://doris.apache.org/docs/sql-manual/sql-statements/Utility-Statements/RESUME-MATERIALIZED-VIEW"},"RESUME MATERIALIZED VIEW")),(0,i.yg)("h3",{id:"7-cancel-refresh-task"},"7 Cancel Refresh Task"),(0,i.yg)("p",null,"Refer to ",(0,i.yg)("a",{parentName:"p",href:"https://doris.apache.org/docs/sql-manual/sql-statements/Utility-Statements/CANCEL-MATERIALIZED-VIEW-TASK"},"CANCEL MATERIALIZED VIEW TASK")),(0,i.yg)("h2",{id:"metadata-querying"},"Metadata Querying"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Query Materialized View Information: use ",(0,i.yg)("a",{parentName:"p",href:"../../../sql-manual/sql-functions/table-valued-functions/mv-infos"},"MV_INFOS"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Query Task Information: use ",(0,i.yg)("a",{parentName:"p",href:"../../../sql-manual/sql-functions/table-valued-functions/tasks?_highlight=task"},"TASKS"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Query Job Information Related to Materialized View: use ",(0,i.yg)("a",{parentName:"p",href:"../../../sql-manual/sql-functions/table-valued-functions/jobs"},"JOBS"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Query Partition Information: use ",(0,i.yg)("a",{parentName:"p",href:"../../../sql-manual/sql-statements/Show-Statements/SHOW-PARTITIONS"},"SHOW PARTITIONS"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"View Table Structure: use ",(0,i.yg)("a",{parentName:"p",href:"../../../sql-manual/sql-statements/Utility-Statements/DESCRIBE"},"DESCRIBE"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"View Creation Statement: use ",(0,i.yg)("a",{parentName:"p",href:"../../../sql-manual/sql-statements/Show-Statements/SHOW-CREATE-MATERIALIZED-VIEW/"},"SHOW CREATE MATERIALIZED VIEW")))),(0,i.yg)("h2",{id:"permission"},"Permission"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Create Materialized View: requires permission to create materialized views (similar to creating tables) and execute the underlying SELECT query (similar to SELECT permission).")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Delete Materialized View: requires permission to delete materialized views (similar to deleting tables).")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Alter Materialized View: requires permission to modify materialized views (similar to modifying tables).")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Pause/Resume/Cancel/Refresh Materialized View: requires permission to create materialized views."))),(0,i.yg)("h2",{id:"materialized-refresh-support-in-data-lakes"},"Materialized Refresh Support in Data Lakes"),(0,i.yg)("p",null,"The level of support for materialized refresh varies by table type and catalog:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Table Type"),(0,i.yg)("th",{parentName:"tr",align:null},"Catalog Type"),(0,i.yg)("th",{parentName:"tr",align:null},"Full Refresh"),(0,i.yg)("th",{parentName:"tr",align:null},"Partition Refresh"),(0,i.yg)("th",{parentName:"tr",align:null},"Triggered Refresh"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Internal"),(0,i.yg)("td",{parentName:"tr",align:null},"Internal"),(0,i.yg)("td",{parentName:"tr",align:null},"Supported since 2.1"),(0,i.yg)("td",{parentName:"tr",align:null},"Supported since 2.1"),(0,i.yg)("td",{parentName:"tr",align:null},"Supported since 2.1.4")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"External"),(0,i.yg)("td",{parentName:"tr",align:null},"Hive"),(0,i.yg)("td",{parentName:"tr",align:null},"Supported since 2.1"),(0,i.yg)("td",{parentName:"tr",align:null},"Supported since 2.1"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Iceberg"),(0,i.yg)("td",{parentName:"tr",align:null},"Supported"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Paimon"),(0,i.yg)("td",{parentName:"tr",align:null},"Supported"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Hudi"),(0,i.yg)("td",{parentName:"tr",align:null},"Supported"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"JDBC"),(0,i.yg)("td",{parentName:"tr",align:null},"Supported"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported"),(0,i.yg)("td",{parentName:"tr",align:null})),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"ES"),(0,i.yg)("td",{parentName:"tr",align:null},"Supported"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported"),(0,i.yg)("td",{parentName:"tr",align:null},"Not Supported"),(0,i.yg)("td",{parentName:"tr",align:null})))),(0,i.yg)("h2",{id:"materialized-views-and-olap-internal-tables"},"Materialized Views and OLAP Internal Tables"),(0,i.yg)("admonition",{title:"s",type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"Since version 2.1.4, materialized views support the Duplicate model.")),(0,i.yg)("p",null,"Materialized views are implemented as OLAP tables using the Duplicate model. This means they theoretically support all DUPLICATE model features. However, certain restrictions apply to ensure efficient data refreshes:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Materialized view partitions are automatically created and maintained based on their base tables; manual partitioning is not allowed.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Operations like ",(0,i.yg)("inlineCode",{parentName:"p"},"DELETE TABLE")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"RENAME TABLE")," cannot be used directly on materialized views due to associated jobs; use materialized view-specific commands instead.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Column data types are derived from the query and cannot be modified, as this may cause refresh tasks to fail.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Materialized views have properties unique to them, which must be modified using materialized view commands. Common properties are modified using ",(0,i.yg)("inlineCode",{parentName:"p"},"ALTER TABLE"),".")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Commands like ",(0,i.yg)("inlineCode",{parentName:"p"},"DESC")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"SHOW PARTITIONS")," can be used to view materialized view descriptions and partition information.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Materialized views support index creation.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Synchronous materialized views can be created based on existing materialized views."))),(0,i.yg)("h2",{id:"direct-querying"},"Direct Querying"),(0,i.yg)("p",null,"The create table statement is as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS lineitem (\n    l_orderkey    integer not null,\n    l_partkey     integer not null,\n    l_suppkey     integer not null,\n    l_linenumber  integer not null,\n    l_quantity    decimalv3(15,2) not null,\n    l_extendedprice  decimalv3(15,2) not null,\n    l_discount    decimalv3(15,2) not null,\n    l_tax         decimalv3(15,2) not null,\n    l_returnflag  char(1) not null,\n    l_linestatus  char(1) not null,\n    l_shipdate    date not null,\n    l_commitdate  date not null,\n    l_receiptdate date not null,\n    l_shipinstruct char(25) not null,\n    l_shipmode     char(10) not null,\n    l_comment      varchar(44) not null\n    )\n    DUPLICATE KEY(l_orderkey, l_partkey, l_suppkey, l_linenumber)\n    PARTITION BY RANGE(l_shipdate)\n(FROM ('2023-10-17') TO ('2023-11-01') INTERVAL 1 DAY)\n    DISTRIBUTED BY HASH(l_orderkey) BUCKETS 3\n    PROPERTIES (\"replication_num\" = \"1\");\n\ninsert into lineitem values\n(1, 2, 3, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-17', '2023-10-17', '2023-10-17', 'a', 'b', 'yyyyyyyyy'),\n(2, 4, 3, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-18', '2023-10-18', '2023-10-18', 'a', 'b', 'yyyyyyyyy'),\n(3, 2, 4, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-19', '2023-10-19', '2023-10-19', 'a', 'b', 'yyyyyyyyy');\nCREATE TABLE IF NOT EXISTS orders  (\n    o_orderkey       integer not null,\n    o_custkey        integer not null,\n    o_orderstatus    char(1) not null,\n    o_totalprice     decimalv3(15,2) not null,\n    o_orderdate      date not null,\n    o_orderpriority  char(15) not null,\n    o_clerk          char(15) not null,\n    o_shippriority   integer not null,\n    o_comment        varchar(79) not null\n    )\n    DUPLICATE KEY(o_orderkey, o_custkey)\n    PARTITION BY RANGE(o_orderdate)(\n    FROM ('2023-10-17') TO ('2023-11-01') INTERVAL 1 DAY)\n    DISTRIBUTED BY HASH(o_orderkey) BUCKETS 3\n    PROPERTIES (\"replication_num\" = \"1\");\n\n    insert into orders values\n    (1, 1, 'o', 9.5, '2023-10-17', 'a', 'b', 1, 'yy'),\n    (1, 1, 'o', 10.5, '2023-10-18', 'a', 'b', 1, 'yy'),\n    (2, 1, 'o', 11.5, '2023-10-19', 'a', 'b', 1, 'yy'),\n    (3, 1, 'o', 12.5, '2023-10-19', 'a', 'b', 1, 'yy');\n    CREATE TABLE IF NOT EXISTS partsupp (\n      ps_partkey     INTEGER NOT NULL,\n      ps_suppkey     INTEGER NOT NULL,\n      ps_availqty    INTEGER NOT NULL,\n      ps_supplycost  DECIMALV3(15,2)  NOT NULL,\n      ps_comment     VARCHAR(199) NOT NULL \n    )\n    DUPLICATE KEY(ps_partkey, ps_suppkey)\n    DISTRIBUTED BY HASH(ps_partkey) BUCKETS 3\n    PROPERTIES (\n      \"replication_num\" = \"1\"\n    );\n\n    insert into partsupp values\n    (2, 3, 9, 10.01, 'supply1'),\n    (4, 3, 10, 11.01, 'supply2'),\n    (2, 3, 10, 11.01, 'supply3');\n")),(0,i.yg)("p",null,"Materialized Views can be queried directly like tables."),(0,i.yg)("p",null,"For example:"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"1. Materialized View Definition:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv1\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT t1.l_linenumber,\n       o_custkey,\n       o_orderdate\nFROM (SELECT * FROM lineitem WHERE l_linenumber > 1) t1\nLEFT OUTER JOIN orders\nON l_orderkey = o_orderkey;\n")),(0,i.yg)("p",null,"For more details, refer to  ",(0,i.yg)("a",{parentName:"p",href:"../../../sql-manual/sql-statements/Data-Definition-Statements/Create/CREATE-ASYNC-MATERIALIZED-VIEW"},"CREATE-ASYNC-MATERIALIZED-VIEW")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"2. Query Statement:")),(0,i.yg)("p",null,"Materialized Views allow the addition of filter conditions and aggregate/rollup commands for direct querying"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT\nl_linenumber,\no_custkey\nFROM mv1\nWHERE l_linenumber > 1 and o_orderdate = '2023-10-18';\n")),(0,i.yg)("h2",{id:"rewriting-query"},"Rewriting Query"),(0,i.yg)("h3",{id:"condition-compensation"},"Condition Compensation"),(0,i.yg)("p",null,"When the ",(0,i.yg)("inlineCode",{parentName:"p"},"WHERE")," conditions of the materialized view and query are connected by ",(0,i.yg)("inlineCode",{parentName:"p"},"AND"),":"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"1. If the query's conditions contain those of the materialized view:")," "),(0,i.yg)("p",null,"Compensation is possible."),(0,i.yg)("p",null,"For example, if the query is ",(0,i.yg)("inlineCode",{parentName:"p"},"a > 5 AND b > 10 AND c = 7")," and the materialized view's conditions are ",(0,i.yg)("inlineCode",{parentName:"p"},"a > 5 AND b > 10"),", only ",(0,i.yg)("inlineCode",{parentName:"p"},"c = 7")," needs to be added."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"2. If the query's conditions can be derived from the materialized view's conditions:")," "),(0,i.yg)("p",null,"Compensation is also possible."),(0,i.yg)("p",null,"For example, if the query is ",(0,i.yg)("inlineCode",{parentName:"p"},"a > 5 AND b = 10")," and the materialized view is ",(0,i.yg)("inlineCode",{parentName:"p"},"a > 1 AND b > 8"),", compensation is feasible since the materialized view's conditions encompass the query's."),(0,i.yg)("p",null,"Limitations:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Conditions connected by OR cannot be compensated; they must match exactly.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Non-comparative and range expressions like LIKE cannot be compensated; they must match exactly."))),(0,i.yg)("h3",{id:"join-rewriting"},"JOIN Rewriting"),(0,i.yg)("p",null,"JOIN rewriting applies when the query and materialized view use the same tables. The optimizer attempts transparent rewriting for such queries."),(0,i.yg)("p",null,"Supported JOIN types include:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"INNER JOIN")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"LEFT OUTER JOIN")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"RIGHT OUTER JOIN")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"FULL OUTER JOIN")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"LEFT SEMI JOIN")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"RIGHT SEMI JOIN")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"LEFT ANTI JOIN")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"RIGHT ANTI JOIN"))),(0,i.yg)("h3",{id:"join-derivation"},"JOIN Derivation"),(0,i.yg)("p",null,"When JOIN types differ but the materialized view provides all necessary data, rewriting is possible with predicate compensation outside the JOIN."),(0,i.yg)("p",null,"For example:"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"1. Create Materialized view")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv3\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT\n    l_shipdate, l_suppkey, o_orderdate,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS bitmap_union_basic\nFROM lineitem\nLEFT OUTER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nGROUP BY\nl_shipdate,\nl_suppkey,\no_orderdate;\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"2. Query statement")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    l_shipdate, l_suppkey, o_orderdate,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS bitmap_union_basic\nFROM lineitem\nINNER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nWHERE o_orderdate = '2023-10-18' AND l_suppkey = 3\nGROUP BY\nl_shipdate,\nl_suppkey,\no_orderdate;\n")),(0,i.yg)("h3",{id:"aggregation-rewriting"},"Aggregation Rewriting"),(0,i.yg)("p",null,"Rewriting occurs when the group dimensions match between the query and materialized view, and the aggregation functions are compatible."),(0,i.yg)("p",null,"For example: "),(0,i.yg)("p",null,"The following query can be transparently rewritten because the aggregation dimensions used in the query and the materialized view are consistent. The materialized view's ",(0,i.yg)("inlineCode",{parentName:"p"},"o_shippriority")," field can be used to filter the results. The ",(0,i.yg)("inlineCode",{parentName:"p"},"GROUP BY")," dimensions and aggregation functions in the query can be rewritten using the ",(0,i.yg)("inlineCode",{parentName:"p"},"GROUP BY")," dimensions and aggregation functions of the materialized view."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"1. Create Materialized View")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv4\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT\n    o_shippriority, o_comment,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS cnt_1,\n    count(distinct CASE WHEN O_SHIPPRIORITY > 2 AND o_orderkey IN (2) THEN o_custkey ELSE null END) AS cnt_2,\n    sum(o_totalprice),\n    max(o_totalprice),\n    min(o_totalprice),\n    count(*)\nFROM orders\nGROUP BY\no_shippriority,\no_comment;\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"2. Query Statement")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT \n    o_shippriority, o_comment,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS cnt_1,\n    count(distinct CASE WHEN O_SHIPPRIORITY > 2 AND o_orderkey IN (2) THEN o_custkey ELSE null END) AS cnt_2,\n    sum(o_totalprice),\n    max(o_totalprice),\n    min(o_totalprice),\n    count(*)\nFROM orders\nWHERE o_shippriority in (1, 2)\nGROUP BY\no_shippriority,\no_comment;\n")),(0,i.yg)("h3",{id:"roll-up-aggregation-rewriting"},"Roll-Up Aggregation Rewriting"),(0,i.yg)("p",null,"In the definition of a query and a materialized view, even if the aggregation dimensions do not align, rewriting is still possible. The ",(0,i.yg)("inlineCode",{parentName:"p"},"GROUP BY")," dimensions used in the materialized view need to encompass those used in the query, though the query itself may not contain a ",(0,i.yg)("inlineCode",{parentName:"p"},"GROUP BY")," clause. Additionally, the aggregation functions used in the query can be represented using the aggregation functions from the materialized view."),(0,i.yg)("p",null,"Here is an example:"),(0,i.yg)("p",null,"The following query can be transparently rewritten. The aggregation dimensions used in the query and the materialized view do not align, but the dimensions used in the materialized view encompass those in the query. The query can filter results using fields within the dimensions. The query will attempt to roll up functions after the ",(0,i.yg)("inlineCode",{parentName:"p"},"SELECT")," in the materialized view. For instance, ",(0,i.yg)("inlineCode",{parentName:"p"},"bitmap_union")," in the materialized view can be rolled up to ",(0,i.yg)("inlineCode",{parentName:"p"},"bitmap_union_count"),", which aligns with the semantics of ",(0,i.yg)("inlineCode",{parentName:"p"},"count(distinct)")," in the query."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"1. Create Materialized View:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv5\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT\n    l_shipdate, o_orderdate, l_partkey, l_suppkey,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    bitmap_union(to_bitmap(CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END)) AS bitmap_union_basic\nFROM lineitem\nLEFT OUTER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nGROUP BY\nl_shipdate,\no_orderdate,\nl_partkey,\nl_suppkey;\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"2. Query Statement:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    l_shipdate, l_suppkey,\n    sum(o_totalprice) AS sum_total,\n    max(o_totalprice) AS max_total,\n    min(o_totalprice) AS min_total,\n    count(*) AS count_all,\n    count(distinct CASE WHEN o_shippriority > 1 AND o_orderkey IN (1, 3) THEN o_custkey ELSE null END) AS bitmap_union_basic\nFROM lineitem\nLEFT OUTER JOIN orders ON lineitem.l_orderkey = orders.o_orderkey AND l_shipdate = o_orderdate\nWHERE o_orderdate = '2023-10-18' AND l_partkey = 3\nGROUP BY\nl_shipdate,\nl_suppkey;\n")),(0,i.yg)("p",null,"The currently supported list of aggregation roll-up functions is as follows:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Function in Querying"),(0,i.yg)("th",{parentName:"tr",align:null},"Function in MV"),(0,i.yg)("th",{parentName:"tr",align:null},"\u51fd\u6570\u4e0a\u5377\u540e"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"max"),(0,i.yg)("td",{parentName:"tr",align:null},"max"),(0,i.yg)("td",{parentName:"tr",align:null},"max")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"min"),(0,i.yg)("td",{parentName:"tr",align:null},"min"),(0,i.yg)("td",{parentName:"tr",align:null},"min")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"sum"),(0,i.yg)("td",{parentName:"tr",align:null},"sum"),(0,i.yg)("td",{parentName:"tr",align:null},"sum")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"count"),(0,i.yg)("td",{parentName:"tr",align:null},"count"),(0,i.yg)("td",{parentName:"tr",align:null},"sum")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"count(distinct)"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union_count")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union_count"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union"),(0,i.yg)("td",{parentName:"tr",align:null},"bitmap_union_count")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"hll_union_agg, approx_count_distinct, hll_cardinality"),(0,i.yg)("td",{parentName:"tr",align:null},"hll_union \u6216\u8005 hll_raw_agg"),(0,i.yg)("td",{parentName:"tr",align:null},"hll_union_agg")))),(0,i.yg)("h3",{id:"multi-dimensional-aggregation-rewriting"},"Multi-Dimensional Aggregation Rewriting"),(0,i.yg)("p",null,"Rewriting is supported for multi-dimensional aggregations if the materialized view's GROUP BY fields cover all those in the query."),(0,i.yg)("p",null,"Here is an example:"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"1. Create Materialized View:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv5_1\nBUILD IMMEDIATE REFRESH AUTO ON SCHEDULE EVERY 1 hour\nDISTRIBUTED BY RANDOM BUCKETS 3\nPROPERTIES ('replication_num' = '1')\nAS\nselect o_orderstatus, o_orderdate, o_orderpriority,\n       sum(o_totalprice) as sum_total,\n       max(o_totalprice) as max_total,\n       min(o_totalprice) as min_total,\n       count(*) as count_all\nfrom orders\ngroup by\no_orderstatus, o_orderdate, o_orderpriority;\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"2. Query Statement:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"select o_orderstatus, o_orderdate, o_orderpriority,\n       sum(o_totalprice),\n       max(o_totalprice),\n       min(o_totalprice),\n       count(*)\nfrom orders\ngroup by\nGROUPING SETS ((o_orderstatus, o_orderdate), (o_orderpriority), (o_orderstatus), ());\n")),(0,i.yg)("h3",{id:"partition-compensation-rewriting"},"Partition Compensation Rewriting"),(0,i.yg)("p",null,"When a partitioned materialized view does not provide all the data required for a query, the ",(0,i.yg)("inlineCode",{parentName:"p"},"UNION ALL")," operation can be used to combine the data from the original query table and the materialized view, with the result of this union serving as the final output."),(0,i.yg)("p",null,"For example"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"1. Create Materialized view")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv7\nBUILD IMMEDIATE REFRESH AUTO ON MANUAL\npartition by(l_shipdate)\nDISTRIBUTED BY RANDOM BUCKETS 2\nPROPERTIES ('replication_num' = '1') \nas\nselect l_shipdate, o_orderdate, l_partkey,\n       l_suppkey, sum(o_totalprice) as sum_total\nfrom lineitem\n         left join orders on lineitem.l_orderkey = orders.o_orderkey and l_shipdate = o_orderdate\ngroup by\n    l_shipdate,\n    o_orderdate,\n    l_partkey,\n    l_suppkey;\n")),(0,i.yg)("p",null,"\u5f53\u57fa\u8868\u65b0\u589e\u5206\u533a ",(0,i.yg)("inlineCode",{parentName:"p"},"2023-10-21")," \u65f6\uff0c\u5e76\u4e14\u7269\u5316\u89c6\u56fe\u8fd8\u672a\u5237\u65b0\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u7269\u5316\u89c6\u56fe ",(0,i.yg)("inlineCode",{parentName:"p"},"union all")," \u539f\u8868\u7684\u65b9\u5f0f\u8fd4\u56de\u7ed3\u679c\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"insert into lineitem values\n    (1, 2, 3, 4, 5.5, 6.5, 7.5, 8.5, 'o', 'k', '2023-10-21', '2023-10-21', '2023-10-21', 'a', 'b', 'yyyyyyyyy');\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"2. Run Query")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"select l_shipdate, o_orderdate, l_partkey, l_suppkey, sum(o_totalprice) as sum_total\nfrom lineitem\n         left join orders on lineitem.l_orderkey = orders.o_orderkey and l_shipdate = o_orderdate\ngroup by\n    l_shipdate,\n    o_orderdate,\n    l_partkey,\n    l_suppkey;\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"3. Result")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM mv7\nunion all\nselect t1.l_shipdate, o_orderdate, t1.l_partkey, t1.l_suppkey, sum(o_totalprice) as sum_total\nfrom (select * from lineitem where l_shipdate = '2023-10-21') t1\n         left join orders on t1.l_orderkey = orders.o_orderkey and t1.l_shipdate = o_orderdate\ngroup by\n    t1.l_shipdate,\n    o_orderdate,\n    t1.l_partkey,\n    t1.l_suppkey;\n")),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"Currently, partition compensation is supported, but conditional UNION ALL compensation is not yet supported."),(0,i.yg)("p",{parentName:"admonition"},"For example, if the materialized view has a WHERE condition, taking the previous example, if the materialized view's filtering condition includes ",(0,i.yg)("inlineCode",{parentName:"p"},"WHERE l_shipdate > '2023-10-19'"),", but the query condition is ",(0,i.yg)("inlineCode",{parentName:"p"},"WHERE l_shipdate > '2023-10-18'"),", currently, this scenario cannot be compensated using UNION ALL. This feature is pending support.")),(0,i.yg)("h3",{id:"nested-materialized-view-rewriting"},"Nested Materialized View Rewriting"),(0,i.yg)("p",null,"The SQL definition of a materialized view can utilize other materialized views, referred to as nested materialized views. There is theoretically no limit to the number of nesting levels, and such materialized views can be queried directly or transparently rewritten. Nested materialized views are also eligible for transparent rewriting."),(0,i.yg)("p",null,"Here's an example:"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"1. Create the inner nested materialized view ",(0,i.yg)("inlineCode",{parentName:"strong"},"mv8_0_inner_mv"),":")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv8_0_inner_mv\nBUILD IMMEDIATE REFRESH COMPLETE ON MANUAL\nDISTRIBUTED BY RANDOM BUCKETS 2\nPROPERTIES ('replication_num' = '1')\nAS\nselect\nl_linenumber,\no_custkey,\no_orderkey,\no_orderstatus,\nl_partkey,\nl_suppkey,\nl_orderkey\nfrom lineitem\ninner join orders on lineitem.l_orderkey = orders.o_orderkey;\n")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"2. Create the outer nested materialized view ",(0,i.yg)("inlineCode",{parentName:"strong"},"mv8_0"),":")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE MATERIALIZED VIEW mv8_0\nBUILD IMMEDIATE REFRESH COMPLETE ON MANUAL\nDISTRIBUTED BY RANDOM BUCKETS 2\nPROPERTIES ('replication_num' = '1') \nAS\nselect\nl_linenumber,\no_custkey,\no_orderkey,\no_orderstatus,\nl_partkey,\nl_suppkey,\nl_orderkey,\nps_availqty\nfrom mv8_0_inner_mv\ninner join partsupp on l_partkey = ps_partkey AND l_suppkey = ps_suppkey;\n")),(0,i.yg)("p",null,"For the following query, both ",(0,i.yg)("inlineCode",{parentName:"p"},"mv8_0_inner_mv")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"mv8_0")," will be successfully rewritten, with the cost-based optimizer ultimately selecting ",(0,i.yg)("inlineCode",{parentName:"p"},"mv8_0"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"select lineitem.l_linenumber\nfrom lineitem\ninner join orders on l_orderkey = o_orderkey\ninner join partsupp on  l_partkey = ps_partkey AND l_suppkey = ps_suppkey\nwhere o_orderstatus = 'o'\n")),(0,i.yg)("p",null,"Notes:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"As the number of nesting levels increases, the time required for transparent rewriting also increases. It is recommended to limit nested materialized views to no more than 3 levels.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Transparent rewriting for nested materialized views is disabled by default. Refer to the switch settings below for enabling it."))),(0,i.yg)("h2",{id:"explain-query-rewriting"},"Explain Query Rewriting"),(0,i.yg)("p",null,"Query Rewrite Hit Analysis for Debugging and Inspection"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"1. To view the hit analysis of materialized view rewrite for debugging and inspection, execute the following statement, which provides a brief overview of the query rewrite process.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"explain <query_sql> \n")),(0,i.yg)("p",null,"The returned information is shown below, with a snippet focusing on materialized view-related details:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"| MaterializedView                                                                                             |\n| MaterializedViewRewriteSuccessAndChose:                                                                      |\n|   Names: mv5                                                                                                 |\n| MaterializedViewRewriteSuccessButNotChose:                                                                   |\n|                                                                                                              |\n| MaterializedViewRewriteFail:                                                                                 |\n|   Name: mv4                                                                                                  |\n|   FailSummary: Match mode is invalid, View struct info is invalid                                            |\n|   Name: mv3                                                                                                  |\n|   FailSummary: Match mode is invalid, Rewrite compensate predicate by view fail, View struct info is invalid |\n|   Name: mv1                                                                                                  |\n|   FailSummary: The columns used by query are not in view, View struct info is invalid                        |\n|   Name: mv2                                                                                                  |\n|   FailSummary: The columns used by query are not in view, View struct info is invalid                        |\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"MaterializedViewRewriteSuccessAndChose: Indicates successful rewrite where the Cost-Based Optimizer (CBO) selected a materialized view. Lists the names of the materialized views chosen by the CBO.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"MaterializedViewRewriteSuccessButNotChose: Indicates successful rewrite but the CBO ultimately did not select any of these materialized views. Lists the names of these materialized views.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"MaterializedViewRewriteFail: Summarizes the instances where rewrite failed, including the reasons for failure."))),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"2. To gain a detailed understanding of the candidate selection, rewrite process, and final choice made by the CBO for materialized views, execute the following statement:")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"explain memo plan <query_sql>\n")),(0,i.yg)("h2",{id:"reference"},"Reference"),(0,i.yg)("h3",{id:"materialized-view-related-configuration"},"Materialized View Related Configuration"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Configuration"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET enable_nereids_planner = true;"),(0,i.yg)("td",{parentName:"tr",align:null},"Enables the new optimizer required for materialized view rewriting.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET enable_materialized_view_rewrite = true;"),(0,i.yg)("td",{parentName:"tr",align:null},"Enables or disables query rewriting. Default: Enabled.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET materialized_view_rewrite_enable_contain_external_table = true;"),(0,i.yg)("td",{parentName:"tr",align:null},"Allows materialized views containing external tables to participate in rewriting. Default: Disabled.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET materialized_view_rewrite_success_candidate_num = 3;"),(0,i.yg)("td",{parentName:"tr",align:null},"Maximum number of successful rewrite candidates considered by CBO. Default: 3.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET enable_materialized_view_union_rewrite = true;"),(0,i.yg)("td",{parentName:"tr",align:null},"Allows UNION ALL between base tables and materialized views when data is insufficient. Default: Enabled.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET enable_materialized_view_nest_rewrite = true;"),(0,i.yg)("td",{parentName:"tr",align:null},"Enables nested materialized view rewriting. Default: Disabled.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"SET materialized_view_relation_mapping_max_count = 8;"),(0,i.yg)("td",{parentName:"tr",align:null},"Maximum number of relation mappings during rewriting. Default: 8.")))))}m.isMDXComponent=!0}}]);