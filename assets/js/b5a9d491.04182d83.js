"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[852452],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var r=t(296540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),p=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(o.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=i,g=u["".concat(o,".").concat(d)]||u[d]||y[d]||l;return t?r.createElement(g,a(a({ref:n},c),{},{components:t})):r.createElement(g,a({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,a=new Array(l);a[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<l;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},622307:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>y,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=t(58168),i=(t(296540),t(15680));const l={title:"SPLIT_BY_REGEXP",language:"en"},a=void 0,s={unversionedId:"sql-manual/sql-functions/string-functions/split-by-regexp",id:"sql-manual/sql-functions/string-functions/split-by-regexp",title:"SPLIT_BY_REGEXP",description:"\x3c!--",source:"@site/docs/sql-manual/sql-functions/string-functions/split-by-regexp.md",sourceDirName:"sql-manual/sql-functions/string-functions",slug:"/sql-manual/sql-functions/string-functions/split-by-regexp",permalink:"/docs/dev/sql-manual/sql-functions/string-functions/split-by-regexp",draft:!1,tags:[],version:"current",frontMatter:{title:"SPLIT_BY_REGEXP",language:"en"},sidebar:"docs",previous:{title:"SPLIT_BY_STRING",permalink:"/docs/dev/sql-manual/sql-functions/string-functions/split-by-string"},next:{title:"SUBSTRING_INDEX",permalink:"/docs/dev/sql-manual/sql-functions/string-functions/substring-index"}},o={},p=[{value:"split_by_regexp",id:"split_by_regexp",level:2},{value:"description",id:"description",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Arguments",id:"arguments",level:4},{value:"example",id:"example",level:3},{value:"keywords",id:"keywords",level:3}],c={toc:p},u="wrapper";function y(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"split_by_regexp"},"split_by_regexp"),(0,i.yg)("h3",{id:"description"},"description"),(0,i.yg)("h4",{id:"syntax"},"Syntax"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"ARRAY<STRING> split_by_regexp(STRING str, STRING pattern[, int max_limit])")),(0,i.yg)("p",null,"Split the string 'str' based on the input regular expression 'pattern', with the option to retain up to the maximum number 'max_imit'. By default, all strings will be retained, and a split string array will be returned."),(0,i.yg)("h4",{id:"arguments"},"Arguments"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Str ")," - The string that needs to be split Type: ",(0,i.yg)("inlineCode",{parentName:"p"},"String"),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"Pattern "),"- Regular expression Type: ",(0,i.yg)("inlineCode",{parentName:"p"},"String"),"\n",(0,i.yg)("inlineCode",{parentName:"p"},"Max_imit ")," - Reserved number, optional parameter Type: ",(0,i.yg)("inlineCode",{parentName:"p"},"Int")),(0,i.yg)("h3",{id:"example"},"example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'mysql [test_query_qa]>select split_by_regexp(\'abcde\',"");\n+------------------------------+\n| split_by_regexp(\'abcde\', \'\') |\n+------------------------------+\n| ["a", "b", "c", "d", "e"]    |\n+------------------------------+\n1 row in set (0.02 sec)\n\nmysql [test_query_qa]>select split_by_regexp(\'a12bc23de345f\',"\\\\d+");\n+-----------------------------------------+\n| split_by_regexp(\'a12bc23de345f\', \'\\d+\') |\n+-----------------------------------------+\n| ["a", "bc", "de", "f"]                  |\n+-----------------------------------------+\n1 row in set (0.01 sec)\n')),(0,i.yg)("h3",{id:"keywords"},"keywords"),(0,i.yg)("p",null,"SPLIT_BY_REGEXP,SPLIT"))}y.isMDXComponent=!0}}]);