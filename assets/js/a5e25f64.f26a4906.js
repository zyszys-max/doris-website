"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[780707],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var a=n(296540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,y=d["".concat(l,".").concat(h)]||d[h]||p[h]||i;return n?a.createElement(y,o(o({ref:t},u),{},{components:n})):a.createElement(y,o({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},153911:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(58168),r=(n(296540),n(15680));const i={title:"Partition Cache",language:"en"},o=void 0,s={unversionedId:"query/query-cache/partition-cache-manual",id:"version-2.0/query/query-cache/partition-cache-manual",title:"Partition Cache",description:"\x3c!--",source:"@site/versioned_docs/version-2.0/query/query-cache/partition-cache-manual.md",sourceDirName:"query/query-cache",slug:"/query/query-cache/partition-cache-manual",permalink:"/docs/2.0/query/query-cache/partition-cache-manual",draft:!1,tags:[],version:"2.0",frontMatter:{title:"Partition Cache",language:"en"},sidebar:"docs",previous:{title:"SQL Cache",permalink:"/docs/2.0/query/query-cache/sql-cache-manual"},next:{title:"View",permalink:"/docs/2.0/query/view-materialized-view/create-view"}},l={},c=[{value:"Demand scenarios &amp; solutions",id:"demand-scenarios--solutions",level:2},{value:"Design principles",id:"design-principles",level:2},{value:"Usage",id:"usage",level:2},{value:"Unfinished business",id:"unfinished-business",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.yg)(d,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Cache hits can occur when multiple SQLs use the same table partition."),(0,r.yg)("admonition",{title:"Caution",type:"caution"},(0,r.yg)("p",{parentName:"admonition"},(0,r.yg)("strong",{parentName:"p"},"Partition Cache is an experimental feature and is not well maintained, this feature will be removed in version 2.1. Please use it with caution"))),(0,r.yg)("h2",{id:"demand-scenarios--solutions"},"Demand scenarios & solutions"),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"/docs/2.0/query/query-cache/"},"Query Caches Overview")),(0,r.yg)("h2",{id:"design-principles"},"Design principles"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"SQL can be split in parallel, Q = Q1 \u222a Q2 ... \u222a Qn, R= R1 \u222a R2 ... \u222a Rn, Q is the query statement, R is the result set")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"SQL only uses DATE, INT, and BIGINT types of partition field aggregation, and only scans one partition. Therefore, it does not support partitioning by day, but only supports partitioning by year and month.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Cache the results of some dates in the query result set, and then reduce the date range scanned in SQL. In essence, PartitionCache does not reduce the number of partitions scanned, but also reduces the date range scanned, thereby reducing the amount of scanned data."))),(0,r.yg)("p",null,"In addition some restrictions:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Only supports grouping by partition fields, not by other fields. Grouping by other fields may cause the group data to be updated, which will cause the cache to become invalid.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Only the first half, the second half and all hits of the result set are supported in the cache. The result set is not supported to be divided into several parts by cached data, and the dates of the result set must be continuous. If there is no data in the result set on a certain day, then only this Dates one day older will be cached.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If the predicate has columns outside the partition, you must add brackets to the partition predicate ",(0,r.yg)("inlineCode",{parentName:"p"},'where k1 = 1 and (key >= "2023-10-18" and key <= "2021-12-01")'))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The number of days in the query must be greater than 1 and less than cache_result_max_row_count, otherwise the partition cache cannot be used.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"The predicate of the partition field can only be key >= a and key <= b or key = a or key = b or key in (a,b,c)."))),(0,r.yg)("h2",{id:"usage"},"Usage"),(0,r.yg)("p",null,"Make sure cache_enable_partition_mode=true in fe.conf (default is true)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"vim fe/conf/fe.conf\ncache_enable_partition_mode=true\n")),(0,r.yg)("p",null,"Set variables in MySQL command line"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"MySQL [(none)]> set [global] enable_partition_cache=true;\n")),(0,r.yg)("p",null,"If two caching strategies are enabled at the same time, you need to pay attention to the following parameters:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"cache_last_version_interval_second=30\n")),(0,r.yg)("p",null,"If the interval between the latest version of the partition and the present is greater than cache_last_version_interval_second, the entire query result will be cached first. If it is less than this interval, if it meets the conditions of PartitionCache, the PartitionCache data will be pressed."),(0,r.yg)("p",null,"For detailed parameter introduction and unfinished matters, see query-cache.md."),(0,r.yg)("h2",{id:"unfinished-business"},"Unfinished business"),(0,r.yg)("p",null,"Split into read-only partitions and updateable partitions, read-only partitions are cached, update partitions are not cached"),(0,r.yg)("p",null,"As above, query the number of daily users in the last 7 days. For example, if partitioned by date, the data will only be written to the partition of the current day. The data of other partitions other than the current day are fixed. Under the same query SQL, query a certain area that is not updated. The partition indicators are all fixed. As follows, the number of users in the previous 7 days is queried on 2020-03-09. The data from 2020-03-03 to 2020-03-07 comes from the cache. The first query on 2020-03-08 comes from the partition, and subsequent queries come from the cache. , 2020-03-09 because it was written continuously that day, so it comes from the partition."),(0,r.yg)("p",null,"Therefore, to query N days of data, the data is updated for the most recent D days. Similar queries with different date ranges every day only need to query D partitions. The other parts come from the cache, which can effectively reduce the cluster load and query time."),(0,r.yg)("p",null,"Implementation principle example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},'MySQL [(none)]> SELECT eventdate,count(userid) FROM testdb.appevent WHERE eventdate>="2020-03-03" AND eventdate<="2020-03-09" GROUP BY eventdate ORDER BY eventdate;\n+----------------+-----------------+\n| eventdate | count(`userid`) |\n+----------------+-----------------+\n| 2020-03-03 | 15 |\n| 2020-03-04 | 20 |\n| 2020-03-05 | 25 |\n| 2020-03-06 | 30 |\n| 2020-03-07 | 35 |\n| 2020-03-08 | 40 | //The first time comes from the partition, and the subsequent ones come from the cache\n| 2020-03-09 | 25 | //From partition\n+----------------+-----------------+\n7 rows in set (0.02 sec)\n')),(0,r.yg)("p",null,"In PartitionCache, the cached first-level Key is the 128-bit MD5 signature of the SQL after removing the partition conditions. The following is the rewritten SQL to be signed:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT eventdate,count(userid) FROM testdb.appevent GROUP BY eventdate ORDER BY eventdate;\n")),(0,r.yg)("p",null,"The cached second-level key is the content of the partition field of the query result set, such as the content of the eventdate column of the query result above. The ancillary information of the second-level key is the version number and version update time of the partition."),(0,r.yg)("p",null,"The following demonstrates the process of executing the above SQL for the first time on 2020-03-09:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Get data from cache")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"+----------------+-----------------+\n| 2020-03-03 | 15 |\n| 2020-03-04 | 20 |\n| 2020-03-05 | 25 |\n| 2020-03-06 | 30 |\n| 2020-03-07 | 35 |\n+----------------+-----------------+\n")),(0,r.yg)("ol",{start:2},(0,r.yg)("li",{parentName:"ol"},"SQL and data to get data from BE")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT eventdate,count(userid) FROM testdb.appevent WHERE eventdate>="2020-03-08" AND eventdate<="2020-03-09" GROUP BY eventdate ORDER BY eventdate;\n\n+----------------+-----------------+\n| 2020-03-08 | 40 |\n+----------------+-----------------+\n| 2020-03-09 | 25 |\n+----------------+-----------------+\n')),(0,r.yg)("ol",{start:3},(0,r.yg)("li",{parentName:"ol"},"The last data sent to the terminal")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"+----------------+-----------------+\n| eventdate | count(`userid`) |\n+----------------+-----------------+\n| 2020-03-03 | 15 |\n| 2020-03-04 | 20 |\n| 2020-03-05 | 25 |\n| 2020-03-06 | 30 |\n| 2020-03-07 | 35 |\n| 2020-03-08 | 40 |\n| 2020-03-09 | 25 |\n+----------------+-----------------+\n")),(0,r.yg)("ol",{start:4},(0,r.yg)("li",{parentName:"ol"},"Data sent to cache")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-text"},"+----------------+-----------------+\n| 2020-03-08 | 40 |\n+----------------+-----------------+\n")),(0,r.yg)("p",null,"Partition cache is suitable for partitioning by date, some partitions are updated in real time, and the query SQL is relatively fixed."),(0,r.yg)("p",null,"The partition field can also be other fields, but it needs to be ensured that only a small number of partitions are updated."))}p.isMDXComponent=!0}}]);