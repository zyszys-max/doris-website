"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[239938],{15680:(e,t,a)=>{a.d(t,{xA:()=>m,yg:()=>u});var n=a(296540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(a),y=r,u=d["".concat(p,".").concat(y)]||d[y]||g[y]||i;return a?n.createElement(u,l(l({ref:t},m),{},{components:a})):n.createElement(u,l({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=y;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},997442:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(58168),r=(a(296540),a(15680));const i={title:"Bitmap/HLL data format",language:"en"},l=void 0,o={unversionedId:"developer-guide/bitmap-hll-file-format",id:"developer-guide/bitmap-hll-file-format",title:"Bitmap/HLL data format",description:"\x3c!--",source:"@site/community/developer-guide/bitmap-hll-file-format.md",sourceDirName:"developer-guide",slug:"/developer-guide/bitmap-hll-file-format",permalink:"/community/developer-guide/bitmap-hll-file-format",draft:!1,tags:[],version:"current",frontMatter:{title:"Bitmap/HLL data format",language:"en"},sidebar:"community",previous:{title:"C++ Code Diagnostic",permalink:"/community/developer-guide/cpp-diagnostic-code"},next:{title:"Github Checks",permalink:"/community/developer-guide/github-checks"}},p={},s=[{value:"Bitmap format",id:"bitmap-format",level:2},{value:"Format description",id:"format-description",level:3},{value:"HLL format description",id:"hll-format-description",level:2}],m={toc:s},d="wrapper";function g(e){let{components:t,...a}=e;return(0,r.yg)(d,(0,n.A)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"bitmap-format"},"Bitmap format"),(0,r.yg)("h3",{id:"format-description"},"Format description"),(0,r.yg)("p",null,"The bitmap in Doris uses roaring bitmap storage, and the be side uses CRoaring. The serialization format of ",(0,r.yg)("inlineCode",{parentName:"p"},"Roaring")," is compatible in languages \u200b\u200bsuch as C++/java/go, while the serialization result of the format of C++ ",(0,r.yg)("inlineCode",{parentName:"p"},"Roaring64Map")," is the same as that of ",(0,r.yg)("inlineCode",{parentName:"p"},"Roaring64NavigableMap")," in Java. Not compatible. There are 5 types of Doris bimap, each of which is represented by one byte"),(0,r.yg)("p",null,"The bitmap serialization format in Doris is explained as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"}," | flag     | data .....|\n <--1Byte--\x3e<--n bytes--\x3e\n")),(0,r.yg)("p",null,"The Flag value description is as follows:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Value"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"EMPTY, empty bitmap, the following data part is empty, the whole serialization result is only one byte")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1"),(0,r.yg)("td",{parentName:"tr",align:null},"SINGLE32, there is only one 32-bit unsigned integer value in the bitmap, and the next 4 bytes represent the 32-bit unsigned integer value")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"2"),(0,r.yg)("td",{parentName:"tr",align:null},"BITMAP32, 32-bit bitmap corresponds to the type ",(0,r.yg)("inlineCode",{parentName:"td"},"org.roaringbitmap.RoaringBitmap")," in java. The type is ",(0,r.yg)("inlineCode",{parentName:"td"},"roaring::Roaring")," in C++, and the following data is the structure after the sequence of roaring::Roaring. You can use ",(0,r.yg)("inlineCode",{parentName:"td"},"org in java. .roaringbitmap.RoaringBitmap")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"roaring::Roaring")," in c++ directly deserialize")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"3"),(0,r.yg)("td",{parentName:"tr",align:null},"SINGLE64, there is only one 64-bit unsigned integer value in the bitmap, and the next 8 bytes represent the 64-bit unsigned integer value")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4"),(0,r.yg)("td",{parentName:"tr",align:null},"BITMAP64, 64-bit bitmap corresponds to ",(0,r.yg)("inlineCode",{parentName:"td"},"org.roaringbitmap.RoaringBitmap")," in java; ",(0,r.yg)("inlineCode",{parentName:"td"},"Roaring64Map")," in doris in c++. The data structure is the same as the result in the roaring library, but the serialization and deserialization methods It is different, there will be 1-8 bytes of variable-length encoding uint64 in the bitmap representation of the size. The following data is a series of multiple high-order representations of 4 bytes and 32-bit roaring bitmap serialized data repeated")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"SET, When the number of values in the bitmap is greater than one and less than 32, the BitmapValue actually uses a hash set to store the values. The data structure: A uint8_t of one byte represents the number of values, followed by the values themselves (8 bytes each, uint64_t). \uff5c")))),(0,r.yg)("p",null,"C++ serialization and deserialization examples are in the ",(0,r.yg)("inlineCode",{parentName:"p"},"BitmapValue::write()")," method in ",(0,r.yg)("inlineCode",{parentName:"p"},"be/src/util/bitmap_value.h")," and the Java examples are in the ",(0,r.yg)("inlineCode",{parentName:"p"},"serialize()")," ",(0,r.yg)("inlineCode",{parentName:"p"},"deserialize()")," method in ",(0,r.yg)("inlineCode",{parentName:"p"},"fe/fe-common/src/main/java/org/apache/doris/common/io/BitmapValue.java"),"."),(0,r.yg)("h2",{id:"hll-format-description"},"HLL format description"),(0,r.yg)("p",null,"Serialized data in HLL format is implemented in Doris itself. Similar to the Bitmap type, the HLL format is composed of a 1-byte flag followed by multiple bytes of data. The meaning of the flag is as follows"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Value"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"HLL_DATA_EMPTY, empty HLL, the following data part is empty, the entire serialization result is only one byte")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1"),(0,r.yg)("td",{parentName:"tr",align:null},"HLL_DATA_EXPLICIT, the next byte is explicit The number of data blocks, followed by multiple data blocks, each data block is composed of 8 bytes in length and data,")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"2"),(0,r.yg)("td",{parentName:"tr",align:null},"HLL_DATA_SPARSE, only non-zero values are stored, the next 4 bytes indicate the number of registers, and there are multiple register structures in the back. Each register is composed of the index of the first 2 bytes and the value of 1 byte")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"3"),(0,r.yg)("td",{parentName:"tr",align:null},"HLL_DATA_FULL, which means that all 16 ",(0,r.yg)("em",{parentName:"td"}," 1024 registers have values, followed by 16 ")," 1024 bytes of value data")))),(0,r.yg)("p",null,"C++ serialization and deserialization examples are in the ",(0,r.yg)("inlineCode",{parentName:"p"},"serialize()")," ",(0,r.yg)("inlineCode",{parentName:"p"},"deserialize()")," method of ",(0,r.yg)("inlineCode",{parentName:"p"},"be/src/olap/hll.h"),", and the Java examples are in the ",(0,r.yg)("inlineCode",{parentName:"p"},"serialize()")," ",(0,r.yg)("inlineCode",{parentName:"p"},"deserialize()")," method in ",(0,r.yg)("inlineCode",{parentName:"p"},"fe/fe-common/src/main/java/org/apache/doris/common/io/hll.java"),"."))}g.isMDXComponent=!0}}]);