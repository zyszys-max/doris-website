"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[190342],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>b});var r=n(296540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),u=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(a.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,b=p["".concat(a,".").concat(m)]||p[m]||f[m]||l;return n?r.createElement(b,o(o({ref:t},c),{},{components:n})):r.createElement(b,o({ref:t},c))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=m;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},950957:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var r=n(58168),i=(n(296540),n(15680));const l={title:"BIT_TEST",language:"en"},o=void 0,s={unversionedId:"sql-manual/sql-functions/bitwise-functions/bit_test",id:"sql-manual/sql-functions/bitwise-functions/bit_test",title:"BIT_TEST",description:"\x3c!--",source:"@site/docs/sql-manual/sql-functions/bitwise-functions/bit_test.md",sourceDirName:"sql-manual/sql-functions/bitwise-functions",slug:"/sql-manual/sql-functions/bitwise-functions/bit_test",permalink:"/docs/dev/sql-manual/sql-functions/bitwise-functions/bit_test",draft:!1,tags:[],version:"current",frontMatter:{title:"BIT_TEST",language:"en"},sidebar:"docs",previous:{title:"BITAND",permalink:"/docs/dev/sql-manual/sql-functions/bitwise-functions/bitand"},next:{title:"BITOR",permalink:"/docs/dev/sql-manual/sql-functions/bitwise-functions/bitor"}},a={},u=[{value:"bit_test",id:"bit_test",level:2},{value:"description",id:"description",level:3},{value:"Syntax",id:"syntax",level:4},{value:"example",id:"example",level:3},{value:"example",id:"example-1",level:3}],c={toc:u},p="wrapper";function f(e){let{components:t,...n}=e;return(0,i.yg)(p,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"bit_test"},"bit_test"),(0,i.yg)("h3",{id:"description"},"description"),(0,i.yg)("h4",{id:"syntax"},"Syntax"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"bit_test(Integer-type value, Integer-type pos, '......')")),(0,i.yg)("p",null,"\"Convert the value of 'value' into binary form and return the value at the specified position 'pos', where 'pos' starts from 0 and goes from right to left. If there are multiple values for 'pos', combine the values at multiple 'pos' positions using the AND operator and return the final result.\nIf the value of pos is negative or exceeds the total number of bits in value, the result will be 0.\nInteger value ranges: TINYINT, SMALLINT, INT, BIGINT, LARGEINT.\""),(0,i.yg)("h3",{id:"example"},"example"),(0,i.yg)("h3",{id:"example-1"},"example"),(0,i.yg)("p",null,"mysql ","[(none)]",">SELECT bit_test(43, 1);\n+-----------------+\n| bit_test(43, 1) |\n+-----------------+\n|               1 |\n+-----------------+"),(0,i.yg)("p",null,"mysql ","[(none)]",">select bit_test(43,-1);\n+------------------+\n| bit_test(43, -1) |\n+------------------+\n|                0 |\n+------------------+"),(0,i.yg)("p",null,"mysql ","[(none)]",">SELECT bit_test(43, 0, 1, 3, 5,2);\n+-----------------------------+\n| bit_test(43, 0, 1, 3, 5, 2) |\n+-----------------------------+\n|                           0 |\n+-----------------------------+"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"\n### keywords\n\n    bit_test,bit_test_all\n")))}f.isMDXComponent=!0}}]);