"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[228617],{15680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>m});var t=r(296540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,m=u["".concat(s,".").concat(d)]||u[d]||y[d]||l;return r?t.createElement(m,o(o({ref:n},p),{},{components:r})):t.createElement(m,o({ref:n},p))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},573192:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var t=r(58168),a=(r(296540),r(15680));const l={title:"TIME",language:"en"},o=void 0,i={unversionedId:"sql-manual/sql-reference/Data-Types/TIME",id:"version-1.2/sql-manual/sql-reference/Data-Types/TIME",title:"TIME",description:"\x3c!--",source:"@site/versioned_docs/version-1.2/sql-manual/sql-reference/Data-Types/TIME.md",sourceDirName:"sql-manual/sql-reference/Data-Types",slug:"/sql-manual/sql-reference/Data-Types/TIME",permalink:"/docs/1.2/sql-manual/sql-reference/Data-Types/TIME",draft:!1,tags:[],version:"1.2",frontMatter:{title:"TIME",language:"en"},sidebar:"docs",previous:{title:"DATE",permalink:"/docs/1.2/sql-manual/sql-reference/Data-Types/DATE"},next:{title:"DATETIME",permalink:"/docs/1.2/sql-manual/sql-reference/Data-Types/DATETIME"}},s={},c=[{value:"TIME",id:"time",level:2},{value:"name",id:"name",level:3},{value:"description",id:"description",level:3},{value:"example",id:"example",level:3},{value:"keywords",id:"keywords",level:3}],p={toc:c},u="wrapper";function y(e){let{components:n,...r}=e;return(0,a.yg)(u,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"time"},"TIME"),(0,a.yg)("h3",{id:"name"},"name"),(0,a.yg)("p",null,"TIME"),(0,a.yg)("h3",{id:"description"},"description"),(0,a.yg)("p",null,"TIME type\n",(0,a.yg)("inlineCode",{parentName:"p"},"TIME")," type that can appear as a query result. Table storage and manual CAST generation are not supported.\nWhen calculating without constant folding, it could represent ",(0,a.yg)("inlineCode",{parentName:"p"},"[-838:59:59, 838:59:59]"),"\u3002"),(0,a.yg)("h3",{id:"example"},"example"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql [(none)]> select timediff('2020-01-01', '2000-01-01');\n+--------------------------------------------------------+\n| timediff('2020-01-01 00:00:00', '2000-01-01 00:00:00') |\n+--------------------------------------------------------+\n| 175320:00:00                                           |\n+--------------------------------------------------------+\n1 row in set (0.00 sec)\n")),(0,a.yg)("h3",{id:"keywords"},"keywords"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"TIME\n")))}y.isMDXComponent=!0}}]);