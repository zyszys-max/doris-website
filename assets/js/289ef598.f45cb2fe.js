"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[8911],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(296540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},830439:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(58168),r=(n(296540),n(15680));const o={title:"Synchronize data using Insert method",language:"en"},i=void 0,s={unversionedId:"data-operate/import/import-scenes/jdbc-load",id:"version-1.2/data-operate/import/import-scenes/jdbc-load",title:"Synchronize data using Insert method",description:"\x3c!--",source:"@site/versioned_docs/version-1.2/data-operate/import/import-scenes/jdbc-load.md",sourceDirName:"data-operate/import/import-scenes",slug:"/data-operate/import/import-scenes/jdbc-load",permalink:"/docs/1.2/data-operate/import/import-scenes/jdbc-load",draft:!1,tags:[],version:"1.2",frontMatter:{title:"Synchronize data using Insert method",language:"en"},sidebar:"docs",previous:{title:"Synchronize data through external table",permalink:"/docs/1.2/data-operate/import/import-scenes/external-table-load"},next:{title:"Data import things and atomicity",permalink:"/docs/1.2/data-operate/import/import-scenes/load-atomicity"}},l={},p=[{value:"Single write",id:"single-write",level:2},{value:"JDBC example",id:"jdbc-example",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"synchronize-data-using-insert-method"},"Synchronize data using Insert method"),(0,r.yg)("p",null,"Users can use INSERT statement to import data through MySQL protocol."),(0,r.yg)("p",null,"The INSERT statement is used in a similar way to the INSERT statement used in databases such as MySQL. The INSERT statement supports the following two syntaxes:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"* INSERT INTO table SELECT ...\n* INSERT INTO table VALUES(...)\n")),(0,r.yg)("p",null,"Here we only introduce the second way. For a detailed description of the INSERT command, see the ",(0,r.yg)("a",{parentName:"p",href:"/docs/1.2/sql-manual/sql-reference/Data-Manipulation-Statements/Manipulation/INSERT"},"INSERT")," command documentation."),(0,r.yg)("h2",{id:"single-write"},"Single write"),(0,r.yg)("p",null,"Single write means that the user directly executes an INSERT command. An example is as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},'INSERT INTO example_tbl (col1, col2, col3) VALUES (1000, "test", 3.25);\n')),(0,r.yg)("p",null,"For Doris, an INSERT command is a complete import transaction."),(0,r.yg)("p",null,"Therefore, whether it is importing one piece of data or multiple pieces of data, we do not recommend using this method for data import in the production environment. The INSERT operation of high-frequency words will result in a large number of small files in the storage layer, which will seriously affect the system performance."),(0,r.yg)("p",null,"This method is only used for simple offline tests or low-frequency operations."),(0,r.yg)("p",null,"Or you can use the following methods for batch insert operations:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},'INSERT INTO example_tbl VALUES\n(1000, "baidu1", 3.25)\n(2000, "baidu2", 4.25)\n(3000, "baidu3", 5.25);\n')),(0,r.yg)("p",null,"We recommend that the number of inserts in a batch be as large as possible, such as thousands or even 10,000 at a time. Or you can use PreparedStatement to perform batch inserts through the following procedure."),(0,r.yg)("h2",{id:"jdbc-example"},"JDBC example"),(0,r.yg)("p",null,"Here we give a simple JDBC batch INSERT code example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-java"},'package demo.doris;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\npublic class DorisJDBCDemo {\n\n    private static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";\n    private static final String DB_URL_PATTERN = "jdbc:mysql://%s:%d/%s?rewriteBatchedStatements=true";\n    private static final String HOST = "127.0.0.1"; // Leader Node host\n    private static final int PORT = 9030; // query port of Leader Node\n    private static final String DB = "demo";\n    private static final String TBL = "test_1";\n    private static final String USER = "admin";\n    private static final String PASSWD = "my_pass";\n\n    private static final int INSERT_BATCH_SIZE = 10000;\n\n    public static void main(String[] args) {\n        insert();\n    }\n\n    private static void insert() {\n        // Be careful not to add a semicolon ";" at the end\n        String query = "insert into " + TBL + " values(?, ?)";\n        // Set Label to be idempotent.\n        // String query = "insert into " + TBL + " WITH LABEL my_label values(?, ?)";\n\n        Connection conn = null;\n        PreparedStatement stmt = null;\n        String dbUrl = String.format(DB_URL_PATTERN, HOST, PORT, DB);\n        try {\n            Class.forName(JDBC_DRIVER);\n            conn = DriverManager.getConnection(dbUrl, USER, PASSWD);\n            stmt = conn.prepareStatement(query);\n\n            for (int i =0; i < INSERT_BATCH_SIZE; i++) {\n                stmt.setInt(1, i);\n                stmt.setInt(2, i * 100);\n                stmt.addBatch();\n            }\n\n            int[] res = stmt.executeBatch();\n            System.out.println(res);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (stmt != null) {\n                    stmt.close();\n                }\n            } catch (SQLException se2) {\n                se2.printStackTrace();\n            }\n            try {\n                if (conn != null) conn.close();\n            } catch (SQLException se) {\n                se.printStackTrace();\n            }\n        }\n    }\n}\n')),(0,r.yg)("p",null,"Please note the following:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"The JDBC connection string needs to add the ",(0,r.yg)("inlineCode",{parentName:"p"},"rewriteBatchedStatements=true")," parameter and use the ",(0,r.yg)("inlineCode",{parentName:"p"},"PreparedStatement")," method."),(0,r.yg)("p",{parentName:"li"},"Currently, Doris does not support PrepareStatemnt on the server side, so the JDBC Driver will perform batch Prepare on the client side."),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"rewriteBatchedStatements=true")," will ensure that the Driver executes batches. And finally form an INSERT statement of the following form and send it to Doris:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-sql"},'INSERT INTO example_tbl VALUES\n(1000, "baidu1", 3.25)\n(2000, "baidu2", 4.25)\n(3000, "baidu3", 5.25);\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Batch size"),(0,r.yg)("p",{parentName:"li"},"Because batch processing is performed on the client, if a batch is too large, it will occupy the memory resources of the client, so you need to pay attention."),(0,r.yg)("p",{parentName:"li"},"Doris will support PrepareStatemnt on the server in the future, so stay tuned.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Import atomicity"),(0,r.yg)("p",{parentName:"li"},"Like other import methods, the INSERT operation itself supports atomicity. Each INSERT operation is an import transaction, which guarantees atomic writing of all data in an INSERT."),(0,r.yg)("p",{parentName:"li"},'As mentioned earlier, we recommend that when using INSERT to import data, use the "batch" method to import, rather than a single insert.'),(0,r.yg)("p",{parentName:"li"},"At the same time, we can set a Label for each INSERT operation. Through the ",(0,r.yg)("a",{parentName:"p",href:"/docs/1.2/data-operate/import/import-scenes/load-atomicity"},"Label mechanism"),", the idempotency and atomicity of operations can be guaranteed, and the data will not be lost or heavy in the end. For the specific usage of Label in INSERT, you can refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/1.2/sql-manual/sql-reference/Data-Manipulation-Statements/Manipulation/INSERT"},"INSERT")," document."))))}d.isMDXComponent=!0}}]);