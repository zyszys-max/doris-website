"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[624218],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var a=t(296540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),y=i,g=u["".concat(s,".").concat(y)]||u[y]||p[y]||o;return t?a.createElement(g,r(r({ref:n},d),{},{components:t})):a.createElement(g,r({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},294974:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(58168),i=(t(296540),t(15680));const o={title:"Window Function",language:"en"},r=void 0,l={unversionedId:"query/query-data/window-function",id:"version-2.0/query/query-data/window-function",title:"Window Function",description:"\x3c!--",source:"@site/versioned_docs/version-2.0/query/query-data/window-function.md",sourceDirName:"query/query-data",slug:"/query/query-data/window-function",permalink:"/docs/2.0/query/query-data/window-function",draft:!1,tags:[],version:"2.0",frontMatter:{title:"Window Function",language:"en"},sidebar:"docs",previous:{title:"Column to Row (Lateral View)",permalink:"/docs/2.0/query/query-data/lateral-view"},next:{title:"Encrption and Masking Function ",permalink:"/docs/2.0/query/query-data/encryption-function"}},s={},c=[{value:"Window function",id:"window-function",level:2},{value:"Function",id:"function",level:4},{value:"PARTITION BY clause",id:"partition-by-clause",level:4},{value:"ORDER BY clause",id:"order-by-clause",level:4},{value:"Window clause",id:"window-clause",level:4},{value:"Example",id:"example",level:4},{value:"See more",id:"see-more",level:4}],d={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"window-function"},"Window function"),(0,i.yg)("p",null,"Window functions are a special type of built-in functions in databases. Similar to aggregate functions, window functions perform calculations on multiple input rows to obtain a single data value. However, the difference lies in the fact that window functions process the input data within a specific window, rather than grouping and calculating based on the ",(0,i.yg)("inlineCode",{parentName:"p"},"GROUP BY")," clause. The data within each window can be sorted and grouped using the ",(0,i.yg)("inlineCode",{parentName:"p"},"OVER()")," clause. Window functions calculate a separate value for each row of the result set, rather than a single value for each ",(0,i.yg)("inlineCode",{parentName:"p"},"GROUP BY"),". This flexible approach allows users to add additional columns in the ",(0,i.yg)("inlineCode",{parentName:"p"},"SELECT")," clause, providing more opportunities to reorganize and filter the result set. Window functions can only appear in the select list and the outermost ",(0,i.yg)("inlineCode",{parentName:"p"},"ORDER BY")," clause. During the query process, window functions take effect at the end, meaning they are executed after operations such as ",(0,i.yg)("inlineCode",{parentName:"p"},"JOIN"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"WHERE"),", and ",(0,i.yg)("inlineCode",{parentName:"p"},"GROUP BY"),". Window functions are often used in finance and scientific computing to analyze trends, calculate outliers, and perform bucket analysis on large amounts of data."),(0,i.yg)("p",null,"The syntax of window functions as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"function(args) OVER(partition_by_clause order_by_clause [window_clause])    \npartition_by_clause ::= PARTITION BY expr [, expr ...]    \norder_by_clause ::= ORDER BY expr [ASC | DESC] [, expr [ASC | DESC] ...]\n")),(0,i.yg)("h4",{id:"function"},"Function"),(0,i.yg)("p",null,"The currently supported functions include ",(0,i.yg)("inlineCode",{parentName:"p"},"AVG(), COUNT(), DENSE_RANK(), FIRST_VALUE(), LAG(), LAST_VALUE(), LEAD(), MAX(), MIN(), RANK(), ROW_NUMBER(), SUM().")),(0,i.yg)("h4",{id:"partition-by-clause"},"PARTITION BY clause"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"Partition By")," clause is similar to ",(0,i.yg)("inlineCode",{parentName:"p"},"Group By"),". It groups input rows based on the specified one or more columns, where rows with the same values are placed in the same group."),(0,i.yg)("h4",{id:"order-by-clause"},"ORDER BY clause"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"Order By")," clause within a window function behaves similarly to the outer-level ",(0,i.yg)("inlineCode",{parentName:"p"},"Order By"),". It defines the arrangement of input rows, and when ",(0,i.yg)("inlineCode",{parentName:"p"},"Partition By")," is specified, the ",(0,i.yg)("inlineCode",{parentName:"p"},"Order By")," determines the order within each partition. The only difference from the outer ",(0,i.yg)("inlineCode",{parentName:"p"},"Order By")," is that within the ",(0,i.yg)("inlineCode",{parentName:"p"},"OVER")," clause, using ",(0,i.yg)("inlineCode",{parentName:"p"},"Order By n")," (where n is a positive integer) effectively does nothing, whereas in the outer context, ",(0,i.yg)("inlineCode",{parentName:"p"},"Order By n")," signifies sorting based on the nth column."),(0,i.yg)("p",null,"This example demonstrates adding an ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," column to the select list, where its values are 1, 2, 3, and so on, sorted according to the ",(0,i.yg)("inlineCode",{parentName:"p"},"date_and_time")," column in the ",(0,i.yg)("inlineCode",{parentName:"p"},"events")," table."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"SELECT   \nrow_number() OVER (ORDER BY date_and_time) AS id,   \nc1, c2, c3, c4   \nFROM events;\n")),(0,i.yg)("h4",{id:"window-clause"},"Window clause"),(0,i.yg)("p",null,"The Window clause is used to specify a computational range for window functions. It considers the current row and a specified number of rows before and after it as the target for the window function's operation. The methods supported by the Window clause include: AVG(), COUNT(), FIRST_VALUE(), LAST_VALUE(), and SUM(). For MAX() and MIN(), the Window clause can specify a starting range of UNBOUNDED PRECEDING."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"ROWS BETWEEN [ { m | UNBOUNDED } PRECEDING | CURRENT ROW] [ AND [CURRENT ROW | { UNBOUNDED | n } FOLLOWING] ]\n")),(0,i.yg)("h4",{id:"example"},"Example"),(0,i.yg)("p",null,'Taking the following stock data as an example, the stock code is JDR, and the "closing price" refers to the daily closing quotation.'),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"create table stock_ticker (stock_symbol string, closing_price decimal(8,2), closing_date timestamp);    \n...load some data...    \nselect * from stock_ticker order by stock_symbol, closing_date\n | stock_symbol | closing_price | closing_date        |\n |--------------|---------------|---------------------|\n | JDR          | 12.86         | 2014-10-02 00:00:00 |\n | JDR          | 12.89         | 2014-10-03 00:00:00 |\n | JDR          | 12.94         | 2014-10-04 00:00:00 |\n | JDR          | 12.55         | 2014-10-05 00:00:00 |\n | JDR          | 14.03         | 2014-10-06 00:00:00 |\n | JDR          | 14.75         | 2014-10-07 00:00:00 |\n | JDR          | 13.98         | 2014-10-08 00:00:00 |\n")),(0,i.yg)("p",null,"This query utilizes a window function to generate the ",(0,i.yg)("inlineCode",{parentName:"p"},"moving_average "),"column, which calculates the average stock price over a three-day span, specifically the previous day, the current day, and the next day. Since there is no previous day's data for the first day and no next day's data for the last day, the average is only calculated based on two days for those rows. In this case, the ",(0,i.yg)("inlineCode",{parentName:"p"},"Partition By")," clause is not relevant because all the data pertains to the stock JDR. However, if there was additional stock information, ",(0,i.yg)("inlineCode",{parentName:"p"},"Partition By")," would ensure that the window function operates exclusively within each partition."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"select stock_symbol, closing_date, closing_price,    \navg(closing_price) over (partition by stock_symbol order by closing_date    \nrows between 1 preceding and 1 following) as moving_average    \nfrom stock_ticker;\n | stock_symbol | closing_date        | closing_price | moving_average |\n |--------------|---------------------|---------------|----------------|\n | JDR          | 2014-10-02 00:00:00 | 12.86         | 12.87          |\n | JDR          | 2014-10-03 00:00:00 | 12.89         | 12.89          |\n | JDR          | 2014-10-04 00:00:00 | 12.94         | 12.79          |\n | JDR          | 2014-10-05 00:00:00 | 12.55         | 13.17          |\n | JDR          | 2014-10-06 00:00:00 | 14.03         | 13.77          |\n | JDR          | 2014-10-07 00:00:00 | 14.75         | 14.25          |\n | JDR          | 2014-10-08 00:00:00 | 13.98         | 14.36          |\n")),(0,i.yg)("h4",{id:"see-more"},"See more"),(0,i.yg)("p",null,"For more window functions, refer to ",(0,i.yg)("a",{parentName:"p",href:"../../sql-manual/sql-functions/window-functions/WINDOW-FUNCTION"},"Window Functions"),"."))}p.isMDXComponent=!0}}]);