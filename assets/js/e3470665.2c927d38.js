"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[715681],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>d});var i=n(296540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,d=u["".concat(s,".").concat(g)]||u[g]||h[g]||a;return n?i.createElement(d,o(o({ref:t},p),{},{components:n})):i.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},981899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(58168),r=(n(296540),n(15680));const a={title:"Adjusting Join Shuffle with Hint",language:"zh-CN"},o=void 0,l={unversionedId:"query-acceleration/tuning/tuning-plan/adjusting-join-shuffle",id:"version-3.0/query-acceleration/tuning/tuning-plan/adjusting-join-shuffle",title:"Adjusting Join Shuffle with Hint",description:"\x3c!--",source:"@site/versioned_docs/version-3.0/query-acceleration/tuning/tuning-plan/adjusting-join-shuffle.md",sourceDirName:"query-acceleration/tuning/tuning-plan",slug:"/query-acceleration/tuning/tuning-plan/adjusting-join-shuffle",permalink:"/docs/3.0/query-acceleration/tuning/tuning-plan/adjusting-join-shuffle",draft:!1,tags:[],version:"3.0",frontMatter:{title:"Adjusting Join Shuffle with Hint",language:"zh-CN"},sidebar:"docs",previous:{title:"Optimizing Join with Colocate Group",permalink:"/docs/3.0/query-acceleration/tuning/tuning-plan/optimizing-join-with-colocate-group"},next:{title:"Controlling Hints with CBO Rule",permalink:"/docs/3.0/query-acceleration/tuning/tuning-plan/controlling-hints-with-cbo-rule"}},s={},c=[{value:"Principle",id:"principle",level:2},{value:"Use Case",id:"use-case",level:2},{value:"Summary",id:"summary",level:2}],p={toc:c},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,i.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"principle"},"Principle"),(0,r.yg)("p",null,"Doris supports the use of hints to adjust the type of data shuffle in Join operations, thereby optimizing query performance. This section will introduce in detail how to use hints in Doris to specify the type of Join shuffle."),(0,r.yg)("p",null,"Currently, Doris is limited to specifying the Distribute Type for the right table in a Join, offering two types to choose from: ",(0,r.yg)("inlineCode",{parentName:"p"},"[shuffle]")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"[broadcast]"),". The Distribute Type should be placed before the right table in the Join, and can be represented using either square brackets ",(0,r.yg)("inlineCode",{parentName:"p"},"[]")," or double slashes ",(0,r.yg)("inlineCode",{parentName:"p"},"//"),"."),(0,r.yg)("p",null,"Examples are as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(*) FROM t2 JOIN [broadcast] t1 ON t1.c1 = t2.c2;\nSELECT COUNT(*) FROM t2 JOIN /*+broadcast*/ t1 ON t1.c1 = t2.c2;\nSELECT /*+ ordered */ COUNT(*) FROM t2 JOIN [broadcast] t1 ON t1.c1 = t2.c2;\nSELECT /*+ ordered */ COUNT(*) FROM t2 JOIN /+broadcast/ t1 ON t1.c1 = t2.c2;\n")),(0,r.yg)("p",null,"When using hints, please note the following:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},'If Doris encounters a DistributeHint that cannot correctly generate an execution plan, it will not display the hint but will make it effective according to the "best effort" principle. Ultimately, the distribute method displayed by EXPLAIN shall be deemed as final.')),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"In the current version, DistributeHint does not support mixing with LEADING, and the hint will only take effect when the table specified by distribute is on the right side of the Join.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"It is recommended to mix DistributeHint with ORDERED. First, use ORDERED to fix the Join order, and then specify the expected distribute method in the corresponding Join."))),(0,r.yg)("h2",{id:"use-case"},"Use Case"),(0,r.yg)("p",null,"Next, we will demonstrate the use of hints through the same example:"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"1. Before Using Hint:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN SHAPE PLAN SELECT COUNT(*) FROM t1 JOIN t2 ON t1.c1 = t2.c2;\n")),(0,r.yg)("p",null,"Result:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"+----------------------------------------------------------------------------------+  \n| Explain String (Nereids Planner)                                                 |  \n+----------------------------------------------------------------------------------+  \n| PhysicalResultSink                                                               |  \n| --hashAgg [GLOBAL]                                                               |  \n| ----PhysicalDistribute [DistributionSpecGather]                                  |  \n| ------hashAgg [LOCAL]                                                            |  \n| --------PhysicalProject                                                          |  \n| ----------hashJoin [INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=()|  \n| ------------PhysicalProject                                                      |  \n| --------------PhysicalOlapScan [t1]                                              |  \n| ------------PhysicalDistribute [DistributionSpecHash]                            |  \n| --------------PhysicalProject                                                    |  \n| ----------------PhysicalOlapScan [t2]                                            |  \n+----------------------------------------------------------------------------------+\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"2. After Using Hint:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN SHAPE PLAN SELECT /*+ ordered */ COUNT(*) FROM t2 JOIN [broadcast] t1 ON t1.c1 = t2.c2;\n")),(0,r.yg)("p",null,"Result:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},"+----------------------------------------------------------------------------------+  \n| Explain String (Nereids Planner)                                                 |  \n+----------------------------------------------------------------------------------+  \n| PhysicalResultSink                                                               |  \n| --hashAgg [GLOBAL]                                                               |  \n| ----PhysicalDistribute [DistributionSpecGather]                                  |  \n| ------hashAgg [LOCAL]                                                            |  \n| --------PhysicalProject                                                          |  \n| ----------hashJoin [INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=()|  \n| ------------PhysicalProject                                                      |  \n| --------------PhysicalOlapScan [t2]                                              |  \n| ------------PhysicalDistribute [DistributionSpecReplicated]                      |  \n| --------------PhysicalProject                                                    |  \n| ----------------PhysicalOlapScan [t1]                                            |  \n|                                                                                  |  \n| Hint log:                                                                        |  \n| Used: ORDERED                                                                    |  \n| UnUsed:                                                                          |  \n| SyntaxError:                                                                     |  \n+----------------------------------------------------------------------------------+\n")),(0,r.yg)("p",null,"In the EXPLAIN results, you can see the relevant information for the distribute operator:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"DistributionSpecReplicated")," indicates that the corresponding data is replicated to all BE nodes.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"DistributionSpecGather")," indicates that the data is gathered to the FE node.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"DistributionSpecHash")," indicates that the data is scattered to different BE nodes according to a specific HashKey and algorithm."))),(0,r.yg)("h2",{id:"summary"},"Summary"),(0,r.yg)("p",null,"By properly using DistributeHint, you can optimize the shuffle method of Join operations and improve query performance. In practice, it is recommended to first analyze the query execution plan through EXPLAIN and then choose the appropriate shuffle type based on the actual situation."))}h.isMDXComponent=!0}}]);