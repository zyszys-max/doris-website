"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[664831],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>d});var i=t(296540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),u=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return i.createElement(p.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(t),m=a,d=c["".concat(p,".").concat(m)]||c[m]||g[m]||r;return t?i.createElement(d,o(o({ref:n},s),{},{components:t})):i.createElement(d,o({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<r;u++)o[u]=t[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},827215:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var i=t(58168),a=(t(296540),t(15680));const r={title:"Manual partitioning",language:"en"},o=void 0,l={unversionedId:"table-design/data-partitioning/manual-partitioning",id:"version-2.0/table-design/data-partitioning/manual-partitioning",title:"Manual partitioning",description:"\x3c!--",source:"@site/versioned_docs/version-2.0/table-design/data-partitioning/manual-partitioning.md",sourceDirName:"table-design/data-partitioning",slug:"/table-design/data-partitioning/manual-partitioning",permalink:"/docs/2.0/table-design/data-partitioning/manual-partitioning",draft:!1,tags:[],version:"2.0",frontMatter:{title:"Manual partitioning",language:"en"},sidebar:"docs",previous:{title:"Basic concepts",permalink:"/docs/2.0/table-design/data-partitioning/basic-concepts"},next:{title:"Dynamic partition",permalink:"/docs/2.0/table-design/data-partitioning/dynamic-partitioning"}},p={},u=[{value:"Partition columns",id:"partition-columns",level:2},{value:"Range partition",id:"range-partition",level:2},{value:"List partition",id:"list-partition",level:2}],s={toc:u},c="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(c,(0,i.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"partition-columns"},"Partition columns"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Partition columns can be specified as one or multiple columns, and the partition columns must be KEY columns. The usage of multi-column partitioning will be introduced later in the summary section of multi-column partitioning."),(0,a.yg)("li",{parentName:"ul"},"When ",(0,a.yg)("inlineCode",{parentName:"li"},"allow_partition_column_nullable")," is set to true, Range partition supports the use of NULL partition columns. List Partition does not support NULL partition columns at all times."),(0,a.yg)("li",{parentName:"ul"},"Regardless of the type of partition column, double quotes are required when writing partition values."),(0,a.yg)("li",{parentName:"ul"},"There is theoretically no upper limit on the number of partitions. However, each table is limited to 4096 partitions by default. If you want to exceed this limit, you can modify the FE configuration parameters ",(0,a.yg)("inlineCode",{parentName:"li"},"max_multi_partition_num")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"max_dynamic_partition_num"),"."),(0,a.yg)("li",{parentName:"ul"},"When creating a table without partitioning, the system will automatically generate a full-range partition with the same name as the table name. This partition is not visible to users and cannot be deleted or modified."),(0,a.yg)("li",{parentName:"ul"},"Overlapping ranges are not allowed when creating partitions.")),(0,a.yg)("h2",{id:"range-partition"},"Range partition"),(0,a.yg)("p",null,"Partition columns are usually time columns for convenient management of old and new data. Range partition supports column types such as DATE, DATETIME, TINYINT, SMALLINT, INT, BIGINT, and LARGEINT."),(0,a.yg)("p",null,"Partition information supports four writing methods:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"FIXED RANGE: the partition as a left-closed, right-open interval.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'PARTITION BY RANGE(col1[, col2, ...])                                                                                                                                                                                                  \n(                                                                                                                                                                                                                                      \n    PARTITION partition_name1 VALUES [("k1-lower1", "k2-lower1", "k3-lower1",...), ("k1-upper1", "k2-upper1", "k3-upper1", ...)),                                                                                                      \n    PARTITION partition_name2 VALUES [("k1-lower1-2", "k2-lower1-2", ...), ("k1-upper1-2", MAXVALUE, ))                                                                                                                                \n)                                                                                                                                                                                                                                      \n')),(0,a.yg)("p",null,"For example: "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'PARTITION BY RANGE(`date`)\n(\n    PARTITION `p201701` VALUES [("2017-01-01"),  ("2017-02-01")),\n    PARTITION `p201702` VALUES [("2017-02-01"), ("2017-03-01")),\n    PARTITION `p201703` VALUES [("2017-03-01"), ("2017-04-01"))\n)\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"LESS THAN: Only define the upper bound of the partition. The lower bound is determined by the upper bound of the previous partition.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'PARTITION BY RANGE(col1[, col2, ...])                                                                                                                                                                                                  \n(                                                                                                                                                                                                                                      \n    PARTITION partition_name1 VALUES LESS THAN MAXVALUE | ("value1", "value2", ...),                                                                                                                                                     \n    PARTITION partition_name2 VALUES LESS THAN MAXVALUE | ("value1", "value2", ...)                                                                                                                                                      \n)                                                                                                                                                                                                                                      \n')),(0,a.yg)("p",null,"For example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'PARTITION BY RANGE(`date`)\n(\n    PARTITION `p201701` VALUES LESS THAN ("2017-02-01"),\n    PARTITION `p201702` VALUES LESS THAN ("2017-03-01"),\n    PARTITION `p201703` VALUES LESS THAN ("2017-04-01")\n)\n\nPARTITION BY RANGE(`date`)\n(\n    PARTITION `p201701` VALUES LESS THAN ("2017-02-01"),\n    PARTITION `p201702` VALUES LESS THAN ("2017-03-01"),\n    PARTITION `p201703` VALUES LESS THAN ("2017-04-01")\n    PARTITION `other` VALUES LESS THAN (MAXVALUE)\n)\n')),(0,a.yg)("h2",{id:"list-partition"},"List partition"),(0,a.yg)("p",null,"Partition columns support data types such as BOOLEAN, TINYINT, SMALLINT, INT, BIGINT, LARGEINT, DATE, DATETIME, CHAR, and VARCHAR. Partition values are enumerated values. Only when the data is one of the enumerated values of the target partition, the partition can be hit ."),(0,a.yg)("p",null,"Partitions support specifying the enumerated values contained in each partition through VALUES IN (...)."),(0,a.yg)("p",null,"For example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'PARTITION BY LIST(city)\n(\n    PARTITION `p_cn` VALUES IN ("Beijing", "Shanghai", "Hong Kong"),\n    PARTITION `p_usa` VALUES IN ("New York", "San Francisco"),\n    PARTITION `p_jp` VALUES IN ("Tokyo")\n)\n')),(0,a.yg)("p",null,"List partition also supports multi-column partitioning, for example:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'PARTITION BY LIST(id, city)\n(\n    PARTITION p1_city VALUES IN (("1", "Beijing"), ("1", "Shanghai")),\n    PARTITION p2_city VALUES IN (("2", "Beijing"), ("2", "Shanghai")),\n    PARTITION p3_city VALUES IN (("3", "Beijing"), ("3", "Shanghai"))\n)\n')))}g.isMDXComponent=!0}}]);