"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([[88419],{15680:(n,t,i)=>{i.d(t,{xA:()=>h,yg:()=>u});var e=i(296540);function a(n,t,i){return t in n?Object.defineProperty(n,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[t]=i,n}function l(n,t){var i=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);t&&(e=e.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),i.push.apply(i,e)}return i}function s(n){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?l(Object(i),!0).forEach((function(t){a(n,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(i,t))}))}return n}function o(n,t){if(null==n)return{};var i,e,a=function(n,t){if(null==n)return{};var i,e,a={},l=Object.keys(n);for(e=0;e<l.length;e++)i=l[e],t.indexOf(i)>=0||(a[i]=n[i]);return a}(n,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(e=0;e<l.length;e++)i=l[e],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(n,i)&&(a[i]=n[i])}return a}var c=e.createContext({}),r=function(n){var t=e.useContext(c),i=t;return n&&(i="function"==typeof n?n(t):s(s({},t),n)),i},h=function(n){var t=r(n.components);return e.createElement(c.Provider,{value:t},n.children)},p="mdxType",y={inlineCode:"code",wrapper:function(n){var t=n.children;return e.createElement(e.Fragment,{},t)}},g=e.forwardRef((function(n,t){var i=n.components,a=n.mdxType,l=n.originalType,c=n.parentName,h=o(n,["components","mdxType","originalType","parentName"]),p=r(i),g=a,u=p["".concat(c,".").concat(g)]||p[g]||y[g]||l;return i?e.createElement(u,s(s({ref:t},h),{},{components:i})):e.createElement(u,s({ref:t},h))}));function u(n,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var l=i.length,s=new Array(l);s[0]=g;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=n,o[p]="string"==typeof n?n:a,s[1]=o;for(var r=2;r<l;r++)s[r]=i[r];return e.createElement.apply(null,s)}return e.createElement.apply(null,i)}g.displayName="MDXCreateElement"},496143:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>o,toc:()=>r});var e=i(58168),a=(i(296540),i(15680));const l={title:"Join Hint",language:"zh-CN"},s=void 0,o={unversionedId:"query/join-optimization/join-hint",id:"version-2.0/query/join-optimization/join-hint",title:"Join Hint",description:"\x3c!--",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/version-2.0/query/join-optimization/join-hint.md",sourceDirName:"query/join-optimization",slug:"/query/join-optimization/join-hint",permalink:"/zh-CN/docs/2.0/query/join-optimization/join-hint",draft:!1,tags:[],version:"2.0",frontMatter:{title:"Join Hint",language:"zh-CN"},sidebar:"docs",previous:{title:"Runtime Filter",permalink:"/zh-CN/docs/2.0/query/join-optimization/runtime-filter"},next:{title:"BITMAP \u7cbe\u51c6\u53bb\u91cd",permalink:"/zh-CN/docs/2.0/query/duplicate/orthogonal-bitmap-manual"}},c={},r=[{value:"\u80cc\u666f",id:"\u80cc\u666f",level:2},{value:"Leading hint \u4f7f\u7528\u8bf4\u660e",id:"leading-hint-\u4f7f\u7528\u8bf4\u660e",level:2},{value:"\u57fa\u672c\u7528\u4f8b",id:"\u57fa\u672c\u7528\u4f8b",level:3},{value:"\u6269\u5c55\u573a\u666f",id:"\u6269\u5c55\u573a\u666f",level:3},{value:"Non-inner join:",id:"non-inner-join",level:3},{value:"View",id:"view",level:3},{value:"\u4e0e ordered \u6df7\u5408\u4f7f\u7528",id:"\u4e0e-ordered-\u6df7\u5408\u4f7f\u7528",level:3},{value:"\u4f7f\u7528\u9650\u5236",id:"\u4f7f\u7528\u9650\u5236",level:3},{value:"OrderedHint \u4f7f\u7528\u8bf4\u660e",id:"orderedhint-\u4f7f\u7528\u8bf4\u660e",level:2},{value:"DistributeHint \u4f7f\u7528\u8bf4\u660e",id:"distributehint-\u4f7f\u7528\u8bf4\u660e",level:2},{value:"\u5f85\u652f\u6301",id:"\u5f85\u652f\u6301",level:2}],h={toc:r},p="wrapper";function y(n){let{components:t,...i}=n;return(0,a.yg)(p,(0,e.A)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"Doris 2.0.4 \u7248\u672c\u4e4b\u540e\u652f\u6301 Join Hint \u529f\u80fd")),(0,a.yg)("h2",{id:"\u80cc\u666f"},"\u80cc\u666f"),(0,a.yg)("p",null,'\u5728\u6570\u636e\u5e93\u4e2d\uff0c"Hint" \u662f\u4e00\u79cd\u7528\u4e8e\u6307\u5bfc\u67e5\u8be2\u4f18\u5316\u5668\u6267\u884c\u8ba1\u5212\u7684\u6307\u4ee4\u3002\u901a\u8fc7\u5728 SQL \u8bed\u53e5\u4e2d\u5d4c\u5165 Hint\uff0c\u53ef\u4ee5\u5f71\u54cd\u4f18\u5316\u5668\u7684\u51b3\u7b56\uff0c\u4ee5\u9009\u4e2d\u671f\u671b\u7684\u6267\u884c\u8def\u5f84\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528 Hint \u7684\u80cc\u666f\u793a\u4f8b\uff1a\n\u5047\u8bbe\u6709\u4e00\u4e2a\u5305\u542b\u5927\u91cf\u6570\u636e\u7684\u8868\uff0c\u800c\u4f60\u77e5\u9053\u5728\u67d0\u4e9b\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u5728\u4e00\u4e2a\u67e5\u8be2\u4e2d\uff0c\u8868\u7684\u8fde\u63a5\u987a\u5e8f\u53ef\u80fd\u4f1a\u5f71\u54cd\u67e5\u8be2\u6027\u80fd\u3002Leading Hint \u5141\u8bb8\u4f60\u6307\u5b9a\u5e0c\u671b\u4f18\u5316\u5668\u9075\u5faa\u7684\u8868\u8fde\u63a5\u7684\u987a\u5e8f\u3002'),(0,a.yg)("p",null,"\u4f8b\u5982\uff0c\u8003\u8651\u4ee5\u4e0b SQL \u67e5\u8be2\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select * from t1 join t2 on t1.c1 = c2;\n+-------------------------------------------+\n| Explain String                            |\n+-------------------------------------------+\n| PhysicalResultSink                        |\n| --PhysicalDistribute                      |\n| ----PhysicalProject                       |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2) |\n| --------PhysicalOlapScan[t2]              |\n| --------PhysicalDistribute                |\n| ----------PhysicalOlapScan[t1]            |\n+-------------------------------------------+\n7 rows in set (0.06 sec)\n")),(0,a.yg)("p",null,"\u5728\u4e0a\u8ff0\u4f8b\u5b50\u91cc\u9762\uff0c\u5728\u6267\u884c\u6548\u7387\u4e0d\u7406\u60f3\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u8c03\u6574\u4e0b join \u987a\u5e8f\u800c\u4e0d\u6539\u53d8\u539f\u59cb sql \u4ee5\u514d\u5f71\u54cd\u5230\u7528\u6237\u539f\u59cb\u573a\u666f\u4e14\u80fd\u8fbe\u5230\u8c03\u4f18\u7684\u76ee\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 leading \u4efb\u610f\u6539\u53d8 tableA \u548c tableB \u7684 join \u987a\u5e8f\u3002\u4f8b\u5982\u53ef\u4ee5\u5199\u6210\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading(t2 t1) */ * from t1 join t2 on c1 = c2;\n+-----------------------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                                     |\n+-----------------------------------------------------------------------------------------------------+\n| PhysicalResultSink                                                                                  |\n| --PhysicalDistribute                                                                                |\n| ----PhysicalProject                                                                                 |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() build RFs:RF0 c1->[c2] |\n| --------PhysicalOlapScan[t2] apply RFs: RF0                                                         |\n| --------PhysicalDistribute                                                                          |\n| ----------PhysicalOlapScan[t1]                                                                      |\n|                                                                                                     |\n| Hint log:                                                                                           |\n| Used: leading(t2 t1)                                                                                |\n| UnUsed:                                                                                             |\n| SyntaxError:                                                                                        |\n+-----------------------------------------------------------------------------------------------------+\n12 rows in set (0.06 sec)\n")),(0,a.yg)("p",null,"\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f7f\u7528\u4e86 /",(0,a.yg)("em",{parentName:"p"},"+ leading(t2 t1) "),"/ \u8fd9\u4e2a Hint\u3002\u8fd9\u4e2a Hint \u544a\u8bc9\u4f18\u5316\u5668\u5728\u6267\u884c\u8ba1\u5212\u4e2d\u4f7f\u7528\u6307\u5b9a\u8868\uff08t2\uff09\u4f5c\u4e3a\u9a71\u52a8\u8868\uff0c\u5e76\u7f6e\u4e8e (t1) \u4e4b\u524d\u3002\n\u672c\u6587\u4e3b\u8981\u9610\u8ff0\u5982\u4f55\u5728 Doris \u91cc\u9762\u4f7f\u7528 join \u76f8\u5173\u7684 hint\uff1aleading hint\u3001ordered hint \u548c distribute hint"),(0,a.yg)("h2",{id:"leading-hint-\u4f7f\u7528\u8bf4\u660e"},"Leading hint \u4f7f\u7528\u8bf4\u660e"),(0,a.yg)("p",null,"Leading Hint \u7528\u4e8e\u6307\u5bfc\u4f18\u5316\u5668\u786e\u5b9a\u67e5\u8be2\u8ba1\u5212\u7684\u8fde\u63a5\u987a\u5e8f\u3002\u5728\u4e00\u4e2a\u67e5\u8be2\u4e2d\uff0c\u8868\u7684\u8fde\u63a5\u987a\u5e8f\u53ef\u80fd\u4f1a\u5f71\u54cd\u67e5\u8be2\u6027\u80fd\u3002"),(0,a.yg)("p",null,"Leading Hint \u5141\u8bb8\u4f60\u6307\u5b9a\u5e0c\u671b\u4f18\u5316\u5668\u9075\u5faa\u7684\u8868\u8fde\u63a5\u7684\u987a\u5e8f\u3002"),(0,a.yg)("p",null,"\u5728 doris \u91cc\u9762\uff0c\u5176\u8bed\u6cd5\u4e3a /",(0,a.yg)("em",{parentName:"p"},"+LEADING( tablespec ","[ tablespec ]","...  ) "),'/,leading \u7531"/',(0,a.yg)("em",{parentName:"p"},'+"\u548c"'),'/"\u5305\u56f4\u5e76\u7f6e\u4e8e select \u8bed\u53e5\u91cc\u9762 select \u7684\u6b63\u540e\u65b9\u3002'),(0,a.yg)("p",null,"\u6ce8\u610f\uff0cleading \u540e\u65b9\u7684 '/' \u548c selectlist \u9700\u8981\u9694\u5f00\u81f3\u5c11\u4e00\u4e2a\u5206\u5272\u7b26\u4f8b\u5982\u7a7a\u683c\u3002\u81f3\u5c11\u9700\u8981\u5199\u4e24\u4e2a\u4ee5\u4e0a\u7684\u8868\u624d\u8ba4\u4e3a\u8fd9\u4e2a leadinghint \u662f\u5408\u7406\u7684\u3002\u4e14\u4efb\u610f\u7684 join \u91cc\u9762\u53ef\u4ee5\u7528\u5927\u62ec\u53f7\u62ec\u53f7\u8d77\u6765\uff0c\u6765\u663e\u5f0f\u5730\u6307\u5b9a joinTree \u7684\u5f62\u72b6\u3002\u4f8b\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading(t2 t1) */ * from t1 join t2 on c1 = c2;\n+------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                              |\n+------------------------------------------------------------------------------+\n| PhysicalResultSink                                                           |\n| --PhysicalDistribute[DistributionSpecGather]                                 |\n| ----PhysicalProject                                                          |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| --------PhysicalOlapScan[t2]                                                 |\n| --------PhysicalDistribute[DistributionSpecHash]                             |\n| ----------PhysicalOlapScan[t1]                                               |\n|                                                                              |\n| Hint log:                                                                    |\n| Used: leading(t2 t1)                                                         |\n| UnUsed:                                                                      |\n| SyntaxError:                                                                 |\n+------------------------------------------------------------------------------+\n12 rows in set (0.01 sec)\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u5f53 leadinghint \u4e0d\u751f\u6548\u7684\u65f6\u5019\u4f1a\u8d70\u6b63\u5e38\u7684\u6d41\u7a0b\u751f\u6210\u8ba1\u5212\uff0cexplain \u4f1a\u663e\u793a\u4f7f\u7528\u7684 hint \u662f\u5426\u751f\u6548\uff0c\u4e3b\u8981\u5206\u4e09\u79cd\u6765\u663e\u793a\uff1a"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"Used\uff1aleading hint \u6b63\u5e38\u751f\u6548"),(0,a.yg)("li",{parentName:"ul"},"Unused\uff1a\u8fd9\u91cc\u4e0d\u652f\u6301\u7684\u60c5\u51b5\u5305\u542b leading \u6307\u5b9a\u7684 join order \u4e0e\u539f sql \u4e0d\u7b49\u4ef7\u6216\u672c\u7248\u672c\u6682\u4e0d\u652f\u6301\u7279\u6027\uff08\u8be6\u89c1\u9650\u5236\uff09"),(0,a.yg)("li",{parentName:"ul"},"SyntaxError\uff1a\u6307 leading hint \u8bed\u6cd5\u9519\u8bef\uff0c\u5982\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u8868\u7b49"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"leading hint \u8bed\u6cd5\u9ed8\u8ba4\u9020\u51fa\u6765\u5de6\u6df1\u6811\uff0c\u4f8b\uff1aselect /",(0,a.yg)("em",{parentName:"p"},"+ leading(t1 t2 t3) "),"/ * from t1 join t2 on...\u9ed8\u8ba4\u6307\u5b9a\u51fa\u6765"))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"      join\n     /    \\\n   join    t3\n  /    \\\n t1    t2\n\nmysql> explain shape plan select /*+ leading(t1 t2 t3) */ * from t1 join t2 on c1 = c2 join t3 on c2=c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalOlapScan[t1]                                                 |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalOlapScan[t2]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalOlapScan[t3]                                                 |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: leading(t1 t2 t3)                                                        |\n| UnUsed:                                                                        |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n15 rows in set (0.00 sec)\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"\u540c\u65f6\u5141\u8bb8\u4f7f\u7528\u5927\u62ec\u53f7\u6307\u5b9a join \u6811\u5f62\u72b6\u3002\u4f8b\uff1a/",(0,a.yg)("em",{parentName:"li"},"+ leading(t1 {t2 t3}) "),"/\njoin\n/    \\\nt1    join\n/    \\\nt2    t3")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 join t2 on c1 = c2 join t3 on c2=c3;\n+----------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                  |\n+----------------------------------------------------------------------------------+\n| PhysicalResultSink                                                               |\n| --PhysicalDistribute[DistributionSpecGather]                                     |\n| ----PhysicalProject                                                              |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=()     |\n| --------PhysicalOlapScan[t1]                                                     |\n| --------PhysicalDistribute[DistributionSpecHash]                                 |\n| ----------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n| ------------PhysicalOlapScan[t2]                                                 |\n| ------------PhysicalDistribute[DistributionSpecHash]                             |\n| --------------PhysicalOlapScan[t3]                                               |\n|                                                                                  |\n| Hint log:                                                                        |\n| Used: leading(t1 { t2 t3 })                                                      |\n| UnUsed:                                                                          |\n| SyntaxError:                                                                     |\n+----------------------------------------------------------------------------------+\n15 rows in set (0.02 sec)\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"\u5f53\u6709 view \u4f5c\u4e3a\u522b\u540d\u53c2\u4e0e joinReorder \u7684\u65f6\u5019\u53ef\u4ee5\u6307\u5b9a\u5bf9\u5e94\u7684 view \u4f5c\u4e3a leading \u7684\u53c2\u6570\u3002\u4f8b\uff1a")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading(alias t1) */ count(*) from t1 join (select c2 from t2 join t3 on t2.c2 = t3.c3) as alias on t1.c1 = alias.c2;\n  +--------------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                      |\n  +--------------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                                   |\n  | --hashAgg[GLOBAL]                                                                    |\n  | ----PhysicalDistribute[DistributionSpecGather]                                       |\n  | ------hashAgg[LOCAL]                                                                 |\n  | --------PhysicalProject                                                              |\n  | ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = alias.c2)) otherCondition=()  |\n  | ------------PhysicalProject                                                          |\n  | --------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n  | ----------------PhysicalProject                                                      |\n  | ------------------PhysicalOlapScan[t2]                                               |\n  | ----------------PhysicalDistribute[DistributionSpecHash]                             |\n  | ------------------PhysicalProject                                                    |\n  | --------------------PhysicalOlapScan[t3]                                             |\n  | ------------PhysicalDistribute[DistributionSpecHash]                                 |\n  | --------------PhysicalProject                                                        |\n  | ----------------PhysicalOlapScan[t1]                                                 |\n  |                                                                                      |\n  | Hint log:                                                                            |\n  | Used: leading(alias t1)                                                              |\n  | UnUsed:                                                                              |\n  | SyntaxError:                                                                         |\n  +--------------------------------------------------------------------------------------+\n  21 rows in set (0.06 sec)\n")),(0,a.yg)("h3",{id:"\u57fa\u672c\u7528\u4f8b"},"\u57fa\u672c\u7528\u4f8b"),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"\u6ce8\u610f\u8fd9\u91cc\u5217\u547d\u540d\u548c\u8868\u547d\u540d\u76f8\u5173\uff0c\u4f8b\uff1a\u53ea\u6709 t1 \u4e2d\u6709 c1 \u5b57\u6bb5\uff0c\u540e\u7eed\u4f8b\u5b50\u4e3a\u4e86\u7b80\u5316\u4f1a\u5c06 t1.c1 \u76f4\u63a5\u5199\u6210 c1")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE testleading;\nUSE testleading;\n\ncreate table t1 (c1 int, c11 int) distributed by hash(c1) buckets 3 properties('replication_num' = '1');\ncreate table t2 (c2 int, c22 int) distributed by hash(c2) buckets 3 properties('replication_num' = '1');\ncreate table t3 (c3 int, c33 int) distributed by hash(c3) buckets 3 properties('replication_num' = '1');\ncreate table t4 (c4 int, c44 int) distributed by hash(c4) buckets 3 properties('replication_num' = '1');\n\n")),(0,a.yg)("p",null,"\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5f53\u6211\u4eec\u9700\u8981\u4ea4\u6362 t1 \u548c t2 \u7684 join \u987a\u5e8f\u7684\u65f6\u5019\u53ea\u9700\u8981\u5728\u524d\u9762\u52a0\u4e0a leading(t2 t1) \u5373\u53ef\uff0cexplain \u7684\u65f6\u5019\u4f1a\u663e\u793a\u662f\u5426\u7528\u4e0a\u4e86\u8fd9\u4e2a hint\u3002"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"\u539f\u59cb plan")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select * from t1 join t2 on t1.c1 = c2;\n+-------------------------------------------+\n| Explain String                            |\n+-------------------------------------------+\n| PhysicalResultSink                        |\n| --PhysicalDistribute                      |\n| ----PhysicalProject                       |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2) |\n| --------PhysicalOlapScan[t2]              |\n| --------PhysicalDistribute                |\n| ----------PhysicalOlapScan[t1]            |\n+-------------------------------------------+\n7 rows in set (0.06 sec)\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Leading plan")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading(t2 t1) */ * from t1 join t2 on c1 = c2;\n+------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                              |\n+------------------------------------------------------------------------------+\n| PhysicalResultSink                                                           |\n| --PhysicalDistribute[DistributionSpecGather]                                 |\n| ----PhysicalProject                                                          |\n| ------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| --------PhysicalOlapScan[t2]                                                 |\n| --------PhysicalDistribute[DistributionSpecHash]                             |\n| ----------PhysicalOlapScan[t1]                                               |\n|                                                                              |\n| Hint log:                                                                    |\n| Used: leading(t2 t1)                                                         |\n| UnUsed:                                                                      |\n| SyntaxError:                                                                 |\n+------------------------------------------------------------------------------+\n12 rows in set (0.00 sec)\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"hint \u6548\u679c\u5c55\u793a"),"\n\uff08Used unused\uff09"),(0,a.yg)("p",null,"\u82e5 leading hint \u6709\u8bed\u6cd5\u9519\u8bef\uff0cexplain \u7684\u65f6\u5019\u4f1a\u5728 syntax error \u91cc\u9762\u663e\u793a\u76f8\u5e94\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u8ba1\u5212\u80fd\u7167\u5e38\u751f\u6210\uff0c\u53ea\u4e0d\u8fc7\u6ca1\u6709\u4f7f\u7528 leading \u800c\u5df2"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading(t2 t3) */ * from t1 join t2 on t1.c1 = c2;\n+--------------------------------------------------------+\n| Explain String                                         |\n+--------------------------------------------------------+\n| PhysicalResultSink                                     |\n| --PhysicalDistribute                                   |\n| ----PhysicalProject                                    |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2)              |\n| --------PhysicalOlapScan[t1]                           |\n| --------PhysicalDistribute                             |\n| ----------PhysicalOlapScan[t2]                         |\n|                                                        |\n| Used:                                                  |\n| UnUsed:                                                |\n| SyntaxError: leading(t2 t3) Msg:can not find table: t3 |\n+--------------------------------------------------------+\n11 rows in set (0.01 sec)\n")),(0,a.yg)("h3",{id:"\u6269\u5c55\u573a\u666f"},"\u6269\u5c55\u573a\u666f"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"\u5de6\u6df1\u6811")),(0,a.yg)("p",null,"\u5f53\u6211\u4eec\u4e0d\u4f7f\u7528\u4efb\u4f55\u62ec\u53f7\u7684\u60c5\u51b5\u4e0b leading \u4f1a\u9ed8\u8ba4\u751f\u6210\u5de6\u6df1\u6811"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading(t1 t2 t3) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalOlapScan[t1]                                                 |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalOlapScan[t2]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalOlapScan[t3]                                                 |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: leading(t1 t2 t3)                                                        |\n| UnUsed:                                                                        |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n15 rows in set (0.10 sec)\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"\u53f3\u6df1\u6811")),(0,a.yg)("p",null,"\u5f53\u6211\u4eec\u60f3\u5c06\u8ba1\u5212\u7684\u5f62\u72b6\u505a\u6210\u53f3\u6df1\u6811\u6216\u8005 bushy \u6811\u6216\u8005 zigzag \u6811\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u52a0\u4e0a\u5927\u62ec\u53f7\u6765\u9650\u5236 plan \u7684\u5f62\u72b6\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u50cf oracle \u4e00\u6837\u7528 swap \u4ece\u5de6\u6df1\u6811\u4e00\u6b65\u6b65\u8c03\u6574\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3;\n+-----------------------------------------------+\n| Explain String                                |\n+-----------------------------------------------+\n| PhysicalResultSink                            |\n| --PhysicalDistribute                          |\n| ----PhysicalProject                           |\n| ------hashJoin[INNER_JOIN](t1.c1 = t2.c2)     |\n| --------PhysicalOlapScan[t1]                  |\n| --------PhysicalDistribute                    |\n| ----------hashJoin[INNER_JOIN](t2.c2 = t3.c3) |\n| ------------PhysicalOlapScan[t2]              |\n| ------------PhysicalDistribute                |\n| --------------PhysicalOlapScan[t3]            |\n|                                               |\n| Used: leading(t1 { t2 t3 })                   |\n| UnUsed:                                       |\n| SyntaxError:                                  |\n+-----------------------------------------------+\n14 rows in set (0.02 sec)\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Bushy \u6811")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading({t1 t2} {t3 t4}) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3 join t4 on c3 = c4;\n+-----------------------------------------------+\n| Explain String                                |\n+-----------------------------------------------+\n| PhysicalResultSink                            |\n| --PhysicalDistribute                          |\n| ----PhysicalProject                           |\n| ------hashJoin[INNER_JOIN](t2.c2 = t3.c3)     |\n| --------hashJoin[INNER_JOIN](t1.c1 = t2.c2)   |\n| ----------PhysicalOlapScan[t1]                |\n| ----------PhysicalDistribute                  |\n| ------------PhysicalOlapScan[t2]              |\n| --------PhysicalDistribute                    |\n| ----------hashJoin[INNER_JOIN](t3.c3 = t4.c4) |\n| ------------PhysicalOlapScan[t3]              |\n| ------------PhysicalDistribute                |\n| --------------PhysicalOlapScan[t4]            |\n|                                               |\n| Used: leading({ t1 t2 } { t3 t4 })            |\n| UnUsed:                                       |\n| SyntaxError:                                  |\n+-----------------------------------------------+\n17 rows in set (0.02 sec)\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Zig-Zag \u6811")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading(t1 {t2 t3} t4) */ * from t1 join t2 on t1.c1 = c2 join t3 on c2 = c3 join t4 on c3 = c4;\n+--------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                      |\n+--------------------------------------------------------------------------------------+\n| PhysicalResultSink                                                                   |\n| --PhysicalDistribute[DistributionSpecGather]                                         |\n| ----PhysicalProject                                                                  |\n| ------hashJoin[INNER_JOIN] hashCondition=((t3.c3 = t4.c4)) otherCondition=()         |\n| --------PhysicalDistribute[DistributionSpecHash]                                     |\n| ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=()     |\n| ------------PhysicalOlapScan[t1]                                                     |\n| ------------PhysicalDistribute[DistributionSpecHash]                                 |\n| --------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n| ----------------PhysicalOlapScan[t2]                                                 |\n| ----------------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------------PhysicalOlapScan[t3]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                                     |\n| ----------PhysicalOlapScan[t4]                                                       |\n|                                                                                      |\n| Hint log:                                                                            |\n| Used: leading(t1 { t2 t3 } t4)                                                       |\n| UnUsed:                                                                              |\n| SyntaxError:                                                                         |\n+--------------------------------------------------------------------------------------+\n19 rows in set (0.02 sec)\n")),(0,a.yg)("h3",{id:"non-inner-join"},"Non-inner join:"),(0,a.yg)("p",null,"\u5f53\u9047\u5230\u975e inner-join \u7684\u65f6\u5019\uff0c\u4f8b\u5982 Outer join \u6216\u8005 semi/anti join \u7684\u65f6\u5019\uff0cleading hint \u4f1a\u6839\u636e\u539f\u59cb sql \u8bed\u4e49\u81ea\u52a8\u63a8\u5bfc\u5404\u4e2a join \u7684 join \u65b9\u5f0f\u3002\u82e5\u9047\u5230\u4e0e\u539f\u59cb sql \u8bed\u4e49\u4e0d\u540c\u7684 leading hint \u6216\u8005\u751f\u6210\u4e0d\u4e86\u7684\u60c5\u51b5\u5219\u4f1a\u653e\u5230 unused \u91cc\u9762\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u8ba1\u5212\u6b63\u5e38\u6d41\u7a0b\u7684\u751f\u6210\u3002\n\u4e0b\u9762\u662f\u4e0d\u80fd\u4ea4\u6362\u7684\u4f8b\u5b50\uff1a "),(0,a.yg)("p",null,"-------- test outer join which can not swap",(0,a.yg)("br",{parentName:"p"}),"\n","--  t1 leftjoin (t2 join t3 on (P23)) on (P12) != (t1 leftjoin t2 on (P12)) join t3 on (P23)"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalOlapScan[t1]                                                 |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalOlapScan[t2]                                               |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalOlapScan[t3]                                                 |\n|                                                                                |\n| Hint log:                                                                      |\n| Used:                                                                          |\n| UnUsed: leading(t1 { t2 t3 })                                                  |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n15 rows in set (0.01 sec)\n")),(0,a.yg)("p",null,"\u4e0b\u9762\u662f\u4e00\u4e9b\u53ef\u4ee5\u4ea4\u6362\u7684\u4f8b\u5b50\u548c\u4e0d\u80fd\u4ea4\u6362\u7684\u4f8b\u5b50\uff0c\u8bfb\u8005\u53ef\u81ea\u884c\u9a8c\u8bc1"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"-------- test outer join which can swap\n-- (t1 leftjoin t2  on (P12)) innerjoin t3 on (P13) = (t1 innerjoin t3 on (P13)) leftjoin t2  on (P12)\nexplain shape plan select * from t1 left join t2 on c1 = c2 join t3 on c1 = c3;\nexplain shape plan select /*+ leading(t1 t3 t2) */ * from t1 left join t2 on c1 = c2 join t3 on c1 = c3;\n\n-- (t1 leftjoin t2  on (P12)) leftjoin t3 on (P13) = (t1 leftjoin t3 on (P13)) leftjoin t2  on (P12)\nexplain shape plan select * from t1 left join t2 on c1 = c2 left join t3 on c1 = c3;\nexplain shape plan select /*+ leading(t1 t3 t2) */ * from t1 left join t2 on c1 = c2 left join t3 on c1 = c3;\n\n-- (t1 leftjoin t2  on (P12)) leftjoin t3 on (P23) = t1 leftjoin (t2  leftjoin t3 on (P23)) on (P12)\nselect /*+ leading(t2 t3 t1) SWAP_INPUT(t1) */ * from t1 left join t2 on c1 = c2 left join t3 on c2 = c3;\nexplain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 left join t3 on c2 = c3;\nexplain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 left join t3 on c2 = c3;\n\n-------- test outer join which can not swap\n--  t1 leftjoin (t2  join t3 on (P23)) on (P12) != (t1 leftjoin t2  on (P12)) join t3 on (P23)\n-- eliminated to inner join\nexplain shape plan select /*+ leading(t1 {t2 t3}) */ * from t1 left join t2 on c1 = c2 join t3 on c2 = c3;\nexplain graph select /*+ leading(t1 t2 t3) */ * from t1 left join (select * from t2 join t3 on c2 = c3) on c1 = c2;\n\n-- test semi join\nexplain shape plan select * from t1 where c1 in (select c2 from t2);\nexplain shape plan select /*+ leading(t2 t1) */ * from t1 where c1 in (select c2 from t2);\n\n-- test anti join\nexplain shape plan select * from t1 where exists (select c2 from t2);\n")),(0,a.yg)("h3",{id:"view"},"View"),(0,a.yg)("p",null,"\u9047\u5230\u522b\u540d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u5c06\u522b\u540d\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u5b50\u6811\u8fdb\u884c\u6307\u5b9a\uff0c\u5b50\u6811\u91cc\u9762\u7684 joinOrder \u7531\u6587\u672c\u5e8f\u751f\u6210\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql>  explain shape plan select /*+ leading(alias t1) */ count(*) from t1 join (select c2 from t2 join t3 on t2.c2 = t3.c3) as alias on t1.c1 = alias.c2;\n+--------------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                      |\n+--------------------------------------------------------------------------------------+\n| PhysicalResultSink                                                                   |\n| --hashAgg[GLOBAL]                                                                    |\n| ----PhysicalDistribute[DistributionSpecGather]                                       |\n| ------hashAgg[LOCAL]                                                                 |\n| --------PhysicalProject                                                              |\n| ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = alias.c2)) otherCondition=()  |\n| ------------PhysicalProject                                                          |\n| --------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n| ----------------PhysicalProject                                                      |\n| ------------------PhysicalOlapScan[t2]                                               |\n| ----------------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------------PhysicalProject                                                    |\n| --------------------PhysicalOlapScan[t3]                                             |\n| ------------PhysicalDistribute[DistributionSpecHash]                                 |\n| --------------PhysicalProject                                                        |\n| ----------------PhysicalOlapScan[t1]                                                 |\n|                                                                                      |\n| Hint log:                                                                            |\n| Used: leading(alias t1)                                                              |\n| UnUsed:                                                                              |\n| SyntaxError:                                                                         |\n+--------------------------------------------------------------------------------------+\n21 rows in set (0.02 sec)\n")),(0,a.yg)("h3",{id:"\u4e0e-ordered-\u6df7\u5408\u4f7f\u7528"},"\u4e0e ordered \u6df7\u5408\u4f7f\u7528"),(0,a.yg)("p",null,"\u5f53\u4e0e ordered hint \u6df7\u5408\u4f7f\u7528\u7684\u65f6\u5019\u4ee5 ordered hint \u4e3a\u4e3b\uff0c\u5373 ordered hint \u751f\u6548\u4f18\u5148\u7ea7\u9ad8\u4e8e leading hint\u3002\u4f8b\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql>  explain shape plan select /*+ ORDERED LEADING(t1 t2 t3) */ t1.c1 from t2 join t1 on t1.c1 = t2.c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalProject                                                      |\n| ------------PhysicalOlapScan[t2]                                               |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalProject                                                    |\n| --------------PhysicalOlapScan[t1]                                             |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalProject                                                      |\n| ------------PhysicalOlapScan[t3]                                               |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: ORDERED                                                                  |\n| UnUsed: leading(t1 t2 t3)                                                      |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n18 rows in set (0.02 sec)\n")),(0,a.yg)("h3",{id:"\u4f7f\u7528\u9650\u5236"},"\u4f7f\u7528\u9650\u5236"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"\u5f53\u524d\u7248\u672c\u53ea\u652f\u6301\u4f7f\u7528\u4e00\u4e2a leadingHint\u3002\u82e5\u548c\u5b50\u67e5\u8be2\u540c\u65f6\u4f7f\u7528 leadinghint \u7684\u8bdd\u5219\u67e5\u8be2\u4f1a\u62a5\u9519\u3002\u4f8b\uff08\u8fd9\u4e2a\u4f8b\u5b50 explain \u4f1a\u62a5\u9519\uff0c\u4f46\u662f\u4f1a\u8d70\u6b63\u5e38\u7684\u8def\u5f84\u751f\u6210\u8ba1\u5212\uff09\uff1a")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql>  explain shape plan select /*+ leading(alias t1) */ count(*) from t1 join (select /*+ leading(t3 t2) */ c2 from t2 join t3 on t2.c2 = t3.c3) as alias on t1.c1 = alias.c2;\n  +----------------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                        |\n  +----------------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                                     |\n  | --hashAgg[GLOBAL]                                                                      |\n  | ----PhysicalDistribute[DistributionSpecGather]                                         |\n  | ------hashAgg[LOCAL]                                                                   |\n  | --------PhysicalProject                                                                |\n  | ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = alias.c2)) otherCondition=()    |\n  | ------------PhysicalProject                                                            |\n  | --------------PhysicalOlapScan[t1]                                                     |\n  | ------------PhysicalDistribute[DistributionSpecHash]                                   |\n  | --------------PhysicalProject                                                          |\n  | ----------------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=() |\n  | ------------------PhysicalProject                                                      |\n  | --------------------PhysicalOlapScan[t2]                                               |\n  | ------------------PhysicalDistribute[DistributionSpecHash]                             |\n  | --------------------PhysicalProject                                                    |\n  | ----------------------PhysicalOlapScan[t3]                                             |\n  |                                                                                        |\n  | Hint log:                                                                              |\n  | Used:                                                                                  |\n  | UnUsed: leading(alias t1)                                                              |\n  | SyntaxError: leading(t3 t2) Msg:one query block can only have one leading clause       |\n  +----------------------------------------------------------------------------------------+\n  21 rows in set (0.01 sec)\n")),(0,a.yg)("h2",{id:"orderedhint-\u4f7f\u7528\u8bf4\u660e"},"OrderedHint \u4f7f\u7528\u8bf4\u660e"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u4f7f\u7528 ordered hint \u4f1a\u8ba9 join tree \u7684\u5f62\u72b6\u56fa\u5b9a\u4e0b\u6765\uff0c\u6309\u7167\u6587\u672c\u5e8f\u6765\u663e\u793a")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u8bed\u6cd5\u4e3a /",(0,a.yg)("em",{parentName:"p"},"+ ORDERED "),'/,leading \u7531"/',(0,a.yg)("em",{parentName:"p"},'+"\u548c"'),'/"\u5305\u56f4\u5e76\u7f6e\u4e8e select \u8bed\u53e5\u91cc\u9762 select \u7684\u6b63\u540e\u65b9\uff0c\u4f8b\uff1a\nexplain shape plan select /',(0,a.yg)("em",{parentName:"p"},"+ ORDERED "),"/ t1.c1 from t2 join t1 on t1.c1 = t2.c2 join t3 on c2 = c3;\njoin\n/    \\\njoin    t3\n/    \\\nt2    t1"))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ ORDERED */ t1.c1 from t2 join t1 on t1.c1 = t2.c2 join t3 on c2 = c3;\n+--------------------------------------------------------------------------------+\n| Explain String(Nereids Planner)                                                |\n+--------------------------------------------------------------------------------+\n| PhysicalResultSink                                                             |\n| --PhysicalDistribute[DistributionSpecGather]                                   |\n| ----PhysicalProject                                                            |\n| ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n| --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n| ----------PhysicalProject                                                      |\n| ------------PhysicalOlapScan[t2]                                               |\n| ----------PhysicalDistribute[DistributionSpecHash]                             |\n| ------------PhysicalProject                                                    |\n| --------------PhysicalOlapScan[t1]                                             |\n| --------PhysicalDistribute[DistributionSpecHash]                               |\n| ----------PhysicalProject                                                      |\n| ------------PhysicalOlapScan[t3]                                               |\n|                                                                                |\n| Hint log:                                                                      |\n| Used: ORDERED                                                                  |\n| UnUsed:                                                                        |\n| SyntaxError:                                                                   |\n+--------------------------------------------------------------------------------+\n18 rows in set (0.02 sec)\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"\u5f53 ordered hint \u548c leading hint \u540c\u65f6\u4f7f\u7528\u65f6\u4ee5 ordered hint \u4e3a\u51c6\uff0cleading hint \u4f1a\u5931\u6548")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ ORDERED LEADING(t1 t2 t3) */ t1.c1 from t2 join t1 on t1.c1 = t2.c2 join t3 on c2 = c3;\n  +--------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                |\n  +--------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                             |\n  | --PhysicalDistribute[DistributionSpecGather]                                   |\n  | ----PhysicalProject                                                            |\n  | ------hashJoin[INNER_JOIN] hashCondition=((t2.c2 = t3.c3)) otherCondition=()   |\n  | --------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n  | ----------PhysicalProject                                                      |\n  | ------------PhysicalOlapScan[t2]                                               |\n  | ----------PhysicalDistribute[DistributionSpecHash]                             |\n  | ------------PhysicalProject                                                    |\n  | --------------PhysicalOlapScan[t1]                                             |\n  | --------PhysicalDistribute[DistributionSpecHash]                               |\n  | ----------PhysicalProject                                                      |\n  | ------------PhysicalOlapScan[t3]                                               |\n  |                                                                                |\n  | Hint log:                                                                      |\n  | Used: ORDERED                                                                  |\n  | UnUsed: leading(t1 t2 t3)                                                      |\n  | SyntaxError:                                                                   |\n  +--------------------------------------------------------------------------------+\n  18 rows in set (0.02 sec)\n")),(0,a.yg)("h2",{id:"distributehint-\u4f7f\u7528\u8bf4\u660e"},"DistributeHint \u4f7f\u7528\u8bf4\u660e"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u76ee\u524d\u53ea\u80fd\u6307\u5b9a\u53f3\u8868\u7684 distribute Type \u800c\u4e14\u53ea\u6709","[shuffle]"," \u548c ","[broadcast]","\u4e24\u79cd\uff0c\u5199\u5728 join \u53f3\u8868\u524d\u9762\u4e14\u5141\u8bb8\u4e2d\u62ec\u53f7\u548c/",(0,a.yg)("em",{parentName:"p"},"+ "),"/\u4e24\u79cd\u5199\u6cd5")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u76ee\u524d\u80fd\u4f7f\u7528\u4efb\u610f\u4e2a DistributeHint")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u5f53\u9047\u5230\u65e0\u6cd5\u6b63\u786e\u751f\u6210\u8ba1\u5212\u7684 DistributeHint\uff0c\u6ca1\u6709\u663e\u793a\uff0c\u6309\u6700\u5927\u52aa\u529b\u751f\u6548\uff0c\u6700\u540e\u4ee5 explain \u663e\u793a\u7684 distribute \u65b9\u5f0f\u4e3a\u4e3b")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u5f53\u524d\u7248\u672c\u6682\u4e0d\u4e0e leading \u6df7\u7528\uff0c\u4e14\u5f53 distribute \u6307\u5b9a\u7684\u8868\u4f4d\u4e8e join \u53f3\u8fb9\u624d\u53ef\u751f\u6548\u3002")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u591a\u4e0e ordered \u6df7\u7528\uff0c\u5229\u7528\u6587\u672c\u5e8f\u628a join \u987a\u5e8f\u56fa\u5b9a\u4e0b\u6765\uff0c\u7136\u540e\u518d\u6307\u5b9a\u76f8\u5e94\u7684 join \u91cc\u9762\u6211\u4eec\u9884\u671f\u4f7f\u7528\u4ec0\u4e48\u6837\u7684 distribute \u65b9\u5f0f\u3002\u4f8b\uff1a"))),(0,a.yg)("p",null,"\u4f7f\u7528\u524d\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select count(*) from t1 join t2 on t1.c1 = t2.c2;\n  +----------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                  |\n  +----------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                               |\n  | --hashAgg[GLOBAL]                                                                |\n  | ----PhysicalDistribute[DistributionSpecGather]                                   |\n  | ------hashAgg[LOCAL]                                                             |\n  | --------PhysicalProject                                                          |\n  | ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n  | ------------PhysicalProject                                                      |\n  | --------------PhysicalOlapScan[t1]                                               |\n  | ------------PhysicalDistribute[DistributionSpecHash]                             |\n  | --------------PhysicalProject                                                    |\n  | ----------------PhysicalOlapScan[t2]                                             |\n  +----------------------------------------------------------------------------------+\n  11 rows in set (0.01 sec)\n")),(0,a.yg)("p",null,"\u4f7f\u7528\u540e\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"mysql> explain shape plan select /*+ ordered */ count(*) from t2 join[broadcast] t1 on t1.c1 = t2.c2;\n  +----------------------------------------------------------------------------------+\n  | Explain String(Nereids Planner)                                                  |\n  +----------------------------------------------------------------------------------+\n  | PhysicalResultSink                                                               |\n  | --hashAgg[GLOBAL]                                                                |\n  | ----PhysicalDistribute[DistributionSpecGather]                                   |\n  | ------hashAgg[LOCAL]                                                             |\n  | --------PhysicalProject                                                          |\n  | ----------hashJoin[INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=() |\n  | ------------PhysicalProject                                                      |\n  | --------------PhysicalOlapScan[t2]                                               |\n  | ------------PhysicalDistribute[DistributionSpecReplicated]                       |\n  | --------------PhysicalProject                                                    |\n  | ----------------PhysicalOlapScan[t1]                                             |\n  |                                                                                  |\n  | Hint log:                                                                        |\n  | Used: ORDERED                                                                    |\n  | UnUsed:                                                                          |\n  | SyntaxError:                                                                     |\n  +----------------------------------------------------------------------------------+\n  16 rows in set (0.01 sec)\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Explain shape plan \u91cc\u9762\u4f1a\u663e\u793a distribute \u7b97\u5b50\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u5176\u4e2d DistributionSpecReplicated \u8868\u793a\u8be5\u7b97\u5b50\u5c06\u5bf9\u5e94\u7684\u6570\u636e\u53d8\u6210\u6240\u6709 be \u8282\u70b9\u590d\u5236\u4e00\u4efd\uff0cDistributionSpecGather \u8868\u793a\u5c06\u6570\u636e gather \u5230 fe \u8282\u70b9\uff0cDistributionSpecHash \u8868\u793a\u5c06\u6570\u636e\u6309\u7167\u7279\u5b9a\u7684 hashKey \u4ee5\u53ca\u7b97\u6cd5\u6253\u6563\u5230\u4e0d\u540c\u7684 be \u8282\u70b9\u3002")),(0,a.yg)("h2",{id:"\u5f85\u652f\u6301"},"\u5f85\u652f\u6301"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"leadingHint \u5f85\u652f\u6301\u5b50\u67e5\u8be2\u89e3\u5d4c\u5957\u6307\u5b9a\uff0c\u5f53\u524d\u548c\u5b50\u67e5\u8be2\u63d0\u5347\u4ee5\u540e\u4e0d\u80fd\u6df7\u7528\uff0c\u9700\u8981\u6709 hint \u6765\u63a7\u5236\u662f\u5426\u53ef\u4ee5\u89e3\u5d4c\u5957")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u9700\u8981\u65b0\u7684 distributeHint \u6765\u66f4\u597d\u4e14\u66f4\u5168\u9762\u5730\u63a7\u5236 distribute \u7b97\u5b50")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u6df7\u5408\u4f7f\u7528 leadingHint \u4e0e distributeHint \u6765\u5171\u540c\u786e\u5b9a join \u7684\u5f62\u72b6"))))}y.isMDXComponent=!0}}]);